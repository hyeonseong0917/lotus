{"version":3,"file":"562.js","mappings":";6YACA,2pNAyBA,QAxBa,eADb,EACa,GADb,EACa,UAAG,2FAAkB,OADlC,EACgB,IADhB,4CACgB,IADhB,m2BACwBA,EAAG,KAAEC,EAAK,cACdC,EAAAA,EAAAA,KAEdF,EACA,CAAC,EACD,CACEG,iBAAiB,EACjBC,QAASH,EACL,CACEI,cAAe,UAAF,OAAYJ,IAE3B,CAAC,IAGRK,MAAK,SAACC,GAAQ,OAAKA,EAASC,KAAKA,IAAI,IACrCC,OAAM,SAACC,GAAK,OAAK,IAAI,IAAC,OAdhB,GAeG,QAfNC,EAAM,EAAH,MAeO,gBACkB,MAAlB,IAAIC,MAAM,SACb,gCAGND,GAAG,iCAtBZ,OAsBY,SAtBZ,+KAuBC,gBAtBY,sCCiCb,EA5BoB,SAAUX,EAAoBa,GAAoB,IAAEC,EAAkB,UAAH,8CAAQ,OAC7FC,EAAAA,EAAAA,IACEf,GAAOgB,aAAaC,QAAQ,eAAiB,CAACjB,EAAKgB,aAAaC,QAAQ,gBAAkB,KAC1FH,EAASI,EAAcC,EAAAA,EACvB,CACEC,aAAc,SAACC,EAAKC,EAAKC,EAAQC,EAAY,GAAY,EAAVC,WAC5B,GACfvB,EAAAA,EAAAA,KAEIwB,kGACA,CAAC,EACD,CACEvB,iBAAiB,EACjBC,QAAS,CACPC,cAAe,UAAF,OAAYW,aAAaC,QAAQ,gBAC9CJ,aAAcA,KAInBP,MAAK,SAACK,GACLK,aAAaW,QAAQ,cAAehB,EAAIH,KAAKA,KAC/C,IACCC,OAAM,SAACC,GAAK,OAAKA,CAAK,GAE7B,GAEH,oSChCH,2pNAqBA,QApBa,eADb,EACa,GADb,EACa,UAAG,2FAAkB,OADlC,EACgB,IADhB,4CACgB,IADhB,m2BACwBV,EAAG,KAAEC,EAAK,cACdC,EAAAA,EAAAA,IACXF,EAAK,CACRG,iBAAiB,EACjBC,QAASH,EACL,CACEI,cAAe,UAAF,OAAYJ,IAE3B,CAAC,IAENK,MAAK,SAACC,GAAQ,OAAKA,EAASC,KAAKA,IAAI,IACrCC,OAAM,SAACC,GAAK,OAAK,IAAI,IAAC,OAVhB,GAWG,QAXNC,EAAM,EAAH,MAWO,gBACkB,MAAlB,IAAIC,MAAM,SACb,gCAGND,GAAG,iCAlBZ,OAkBY,SAlBZ,+KAmBC,gBAlBY","sources":["webpack://loatus_web/./utils/postFetcher.ts","webpack://loatus_web/./hooks/useSWRRetry.ts","webpack://loatus_web/./utils/fetcher.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst fetcher = async ([url, token]: string[]) => {\r\n  const res = await axios\r\n    .post(\r\n      url,\r\n      {},\r\n      {\r\n        withCredentials: false,\r\n        headers: token\r\n          ? {\r\n              Authorization: `Bearer ${token}`,\r\n            }\r\n          : {},\r\n      },\r\n    )\r\n    .then((response) => response.data.data)\r\n    .catch((error) => null);\r\n  if (res === null) {\r\n    const error = new Error('errro');\r\n    throw error;\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nexport default fetcher;\r\n","import useSWR from 'swr';\r\nimport { IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport { StateMutator } from 'swr-global-state';\r\nimport postFetcher from '@utils/postFetcher';\r\n\r\nconst useSWRRetry = <T = any>(url: string | null, refreshToken: string, isPost: boolean = false) =>\r\n  useSWR<T | null>(\r\n    url && localStorage.getItem('accessToken') ? [url, localStorage.getItem('accessToken')] : null,\r\n    isPost ? postFetcher : fetcher,\r\n    {\r\n      onErrorRetry: (err, key, config, revalidate, { retryCount }) => {\r\n        if (retryCount < 3) {\r\n          axios\r\n            .post(\r\n              process.env.REACT_APP_DB_HOST + '/auth/reissue',\r\n              {},\r\n              {\r\n                withCredentials: false,\r\n                headers: {\r\n                  Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\r\n                  refreshToken: refreshToken,\r\n                },\r\n              },\r\n            )\r\n            .then((res) => {\r\n              localStorage.setItem('accessToken', res.data.data);\r\n            })\r\n            .catch((error) => error);\r\n        }\r\n      },\r\n    },\r\n  );\r\n\r\nexport default useSWRRetry;\r\n","import axios from 'axios';\r\n\r\nconst fetcher = async ([url, token]: string[]) => {\r\n  const res = await axios\r\n    .get(url, {\r\n      withCredentials: false,\r\n      headers: token\r\n        ? {\r\n            Authorization: `Bearer ${token}`,\r\n          }\r\n        : {},\r\n    })\r\n    .then((response) => response.data.data)\r\n    .catch((error) => null);\r\n  if (res === null) {\r\n    const error = new Error('errro');\r\n    throw error;\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nexport default fetcher;\r\n"],"names":["url","token","axios","withCredentials","headers","Authorization","then","response","data","catch","error","res","Error","refreshToken","isPost","useSWR","localStorage","getItem","postFetcher","fetcher","onErrorRetry","err","key","config","revalidate","retryCount","process","setItem"],"sourceRoot":""}