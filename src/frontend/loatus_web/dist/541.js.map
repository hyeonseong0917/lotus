{"version":3,"file":"541.js","mappings":"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","sources":["webpack://loatus_web/./hooks/useInput.ts","webpack://loatus_web/./hooks/useSWRRetry.ts","webpack://loatus_web/./pages/Channels/index.tsx","webpack://loatus_web/./utils/fetcher.ts"],"sourcesContent":["import {useState, useCallback, ChangeEvent, Dispatch} from \"react\";\r\nimport React from \"react\";\r\n\r\ntype ReturnTypes<T = any> = [T, (e:any)=>void, Dispatch<React.SetStateAction<T>>];\r\nconst useInput = <T = any>(DefaultValue: T):ReturnTypes => {\r\n    const [value, setValue] = useState<T>(DefaultValue);\r\n    const onChangeValue = useCallback((e:any)=>{\r\n        setValue(e.target.value);\r\n    }, [setValue])\r\n    return [value, onChangeValue, setValue]\r\n}\r\n\r\nexport default useInput;","import useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport { StateMutator } from 'swr-global-state';\n\nconst useSWRRetry = <T = any>(url: string | null, refreshToken: string) =>\n  useSWR<T | null>(\n    url && localStorage.getItem('accessToken') ? [url, localStorage.getItem('accessToken')] : null,\n    fetcher,\n    {\n      onErrorRetry: (err, key, config, revalidate, { retryCount }) => {\n        if (retryCount < 3) {\n          axios\n            .post(\n              '/auth/reissue',\n              {},\n              {\n                withCredentials: true,\n                headers: {\n                  Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n                  refreshToken: refreshToken,\n                },\n              },\n            )\n            .then((res) => {\n              localStorage.setItem('accessToken', res.data.data);\n            })\n            .catch((error) => error);\n        }\n      },\n    },\n  );\n\nexport default useSWRRetry;\n","import React, { useCallback, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport useSWRRetry from '@hooks/useSWRRetry';\nimport { Channel, Party } from '@typings/partyDB';\nimport { Outlet, useNavigate, useParams } from 'react-router';\nimport { Badge, Tab, Tabs } from '@mui/material';\nimport useInput from '@hooks/useInput';\nimport BottomNavigation from '@mui/material/BottomNavigation';\nimport BottomNavigationAction from '@mui/material/BottomNavigationAction';\nimport { IUser } from '@typings/db';\nimport MessageIcon from '@mui/icons-material/Message';\nimport axios from 'axios';\n\nconst Channels = () => {\n  const navigate = useNavigate();\n  const [token] = useCookies(['refreshToken']);\n  const { data: userData, error: userError, mutate: userMutate } = useSWRRetry<IUser>('/auth/my', token.refreshToken);\n  const params = useParams();\n  const {\n    data: channels,\n    error: channelsError,\n    mutate: channelsMutate,\n  } = useSWRRetry<Channel[]>('/api/channels', token.refreshToken);\n  const [value, onChangeValue, setValue] = useInput(0);\n  const [navValue, onChangeNavValue, setNavValue] = useInput(0);\n  const {\n    data: myPartiesData,\n    error: myPartiesError,\n    mutate: myPartiesMutate,\n  } = useSWRRetry<Party[]>(\n    userData ? `/api/channels/${params.url}/parties/my/${userData.userId}` : null,\n    token.refreshToken,\n  );\n\n  return (\n    <>\n      <Tabs value={value} onChange={onChangeValue} aria-label=\"basic tabs example\">\n        {channels?.map((channel, key) => (\n          <Tab\n            label={channel.name}\n            id={`tab-${key}`}\n            key={key}\n            aria-controls={`tabpanel-${key}`}\n            onClick={() => {\n              setValue(key);\n              navigate(`/channels/${channel.url}/parties`);\n            }}\n          />\n        ))}\n      </Tabs>\n      <Outlet />\n      <BottomNavigation\n        showLabels\n        value={navValue}\n        onChange={(event, newValue) => {\n          setNavValue(newValue);\n        }}\n      >\n        {myPartiesData?.map((party, key) => (\n          <BottomNavigationAction\n            key={key}\n            label={party.name}\n            icon={\n              <Badge\n                badgeContent={\n                  <>\n                    {async () => {\n                      const res: number = await axios\n                        .get(`/api/channels/${params.url}/parties/${party.name}/unread`)\n                        .then((res) => res.data)\n                        .catch((err) => 0);\n                      return res;\n                    }}\n                  </>\n                }\n                color=\"primary\"\n              >\n                <MessageIcon />\n              </Badge>\n            }\n          />\n        ))}\n      </BottomNavigation>\n    </>\n  );\n};\n\nexport default Channels;\n","import axios from 'axios';\r\n\r\nconst fetcher = async ([url, token]: string[]) => {\r\n  const res = await axios\r\n    .get(url, {\r\n      withCredentials: true,\r\n      headers: token\r\n        ? {\r\n            Authorization: `Bearer ${token}`,\r\n          }\r\n        : {},\r\n    })\r\n    .then((response) => response.data.data)\r\n    .catch((error) => null);\r\n  if (res === null) {\r\n    const error = new Error('errro');\r\n    throw error;\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nexport default fetcher;\r\n"],"names":["DefaultValue","useState","value","setValue","useCallback","e","target","url","refreshToken","useSWR","localStorage","getItem","fetcher","onErrorRetry","err","key","config","revalidate","retryCount","axios","withCredentials","headers","Authorization","then","res","setItem","data","catch","error","i","navigate","useNavigate","token","useCookies","useSWRRetry","userData","params","mutate","useParams","channels","useInput","onChangeValue","navValue","setNavValue","userId","myPartiesData","onChange","map","channel","label","name","id","onClick","showLabels","event","newValue","party","icon","badgeContent","color","response","Error"],"sourceRoot":""}