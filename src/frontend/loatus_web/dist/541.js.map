{"version":3,"file":"541.js","mappings":";gPAYA,QARiB,SAAUA,GACvB,QAAmD,MAAzBC,EAAAA,EAAAA,UAAYD,KAAa,o5BAA5CE,EAAK,KAAEC,EAAQ,KAItB,MAAO,CAACD,GAHcE,EAAAA,EAAAA,cAAY,SAACC,GAC/BF,EAASE,EAAEC,OAAOJ,MACtB,GAAG,CAACC,IAC0BA,EAClC,+ZCTA,gnGAAAI,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,+kBAAAA,GAAA,gEAAAA,GAAA,0JAAAA,EAAA,6FAAAA,GAAA,mIAAAA,IAAA,+RAAAA,IAAA,2OAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,SA0FA,QA9EiB,WACf,IAAMC,GAAWC,EAAAA,EAAAA,MACVC,EAAqC,GAA5BC,EAAAA,EAAAA,GAAW,CAAC,iBAAgB,GAAhC,GACZ,GAIIC,EAAAA,EAAAA,GAAmBC,6FAA4CH,EAAMI,cAHjEC,EAAQ,EAAdC,KAIIC,GAHY,EAAhBC,MACkB,EAAlBC,QAEaC,EAAAA,EAAAA,OACf,GAIIR,EAAAA,EAAAA,GAAuBC,kGAAiDH,EAAMI,cAH1EO,EAAQ,EAAdL,KAIkD,GAH9B,EAApBE,MACsB,EAAtBC,OAEkD,GAAXG,EAAAA,EAAAA,GAAS,GAAE,IAA7CpB,EAAK,KAAEqB,EAAa,KAAEpB,EAAQ,KACwB,KAAXmB,EAAAA,EAAAA,GAAS,GAAE,GAAtDE,EAAQ,KAAoBC,GAAF,KAAa,MAC9C,GAIIb,EAAAA,EAAAA,GACFG,EAAWF,qFAAgC,iBAAH,OAAoBI,EAAOS,IAAG,uBAAeX,EAASY,QAAW,KACzGjB,EAAMI,cALAc,EAAa,EAAnBZ,KAQF,OAPuB,EAArBE,MACuB,EAAvBC,OAOA,gCACE,gBAAC,IAAI,CAACjB,MAAOA,EAAO2B,SAAUN,EAAe,aAAW,sBACrDF,aAAQ,EAARA,EAAUS,KAAI,SAACC,EAASC,GAAG,OAC1B,gBAAC,IAAG,CACFC,MAAOF,EAAQG,KACfC,GAAE,cAASH,GACXA,IAAKA,EACL,mCAA2BA,GAC3BI,QAAS,WACPjC,EAAS6B,GACTxB,EAAS,aAAD,OAAcuB,EAAQL,IAAG,YACnC,GACA,KAGN,gBAAC,KAAM,MACP,gBAAC,IAAgB,CACfW,YAAU,EACVnC,MAAOsB,EACPK,SAAU,SAACS,EAAOC,GAChBd,EAAYc,EACd,GAECX,aAAa,EAAbA,EAAeE,KAAI,SAACU,EAAOR,GAAG,OAC7B,gBAAC,IAAsB,CACrBA,IAAKA,EACLC,MAAOO,EAAMN,KACbO,KACE,gBAAC,IAAK,CACJC,aACE,4CACG,oGAC2BC,EAAAA,EAAAA,IACnB9B,qFAAgC,iBAAH,OAAoBI,EAAOS,IAAG,oBAAYc,EAAMN,KAAI,YACrFU,MAAK,SAACC,GAAG,OAAKA,EAAI7B,IAAI,IACtB8B,OAAM,SAACC,GAAG,OAAK,CAAC,IAAC,OAHH,OAAXF,EAAc,EAAH,uBAIVA,GAAG,4CAIhBG,MAAM,WAEN,gBAAC,IAAW,QAGhB,KAKZ","sources":["webpack://loatus_web/./hooks/useInput.ts","webpack://loatus_web/./pages/Channels/index.tsx"],"sourcesContent":["import {useState, useCallback, ChangeEvent, Dispatch} from \"react\";\r\nimport React from \"react\";\r\n\r\ntype ReturnTypes<T = any> = [T, (e:any)=>void, Dispatch<React.SetStateAction<T>>];\r\nconst useInput = <T = any>(DefaultValue: T):ReturnTypes => {\r\n    const [value, setValue] = useState<T>(DefaultValue);\r\n    const onChangeValue = useCallback((e:any)=>{\r\n        setValue(e.target.value);\r\n    }, [setValue])\r\n    return [value, onChangeValue, setValue]\r\n}\r\n\r\nexport default useInput;","import React, { useCallback, useState } from 'react';\r\nimport { useCookies } from 'react-cookie';\r\nimport useSWRRetry from '@hooks/useSWRRetry';\r\nimport { Channel, Party } from '@typings/partyDB';\r\nimport { Outlet, useNavigate, useParams } from 'react-router';\r\nimport { Badge, Tab, Tabs } from '@mui/material';\r\nimport useInput from '@hooks/useInput';\r\nimport BottomNavigation from '@mui/material/BottomNavigation';\r\nimport BottomNavigationAction from '@mui/material/BottomNavigationAction';\r\nimport { IUser } from '@typings/db';\r\nimport MessageIcon from '@mui/icons-material/Message';\r\nimport axios from 'axios';\r\n\r\nconst Channels = () => {\r\n  const navigate = useNavigate();\r\n  const [token] = useCookies(['refreshToken']);\r\n  const {\r\n    data: userData,\r\n    error: userError,\r\n    mutate: userMutate,\r\n  } = useSWRRetry<IUser>(process.env.REACT_APP_DB_HOST + '/auth/my', token.refreshToken);\r\n  const params = useParams();\r\n  const {\r\n    data: channels,\r\n    error: channelsError,\r\n    mutate: channelsMutate,\r\n  } = useSWRRetry<Channel[]>(process.env.REACT_APP_DB_HOST + '/api/channels', token.refreshToken);\r\n  const [value, onChangeValue, setValue] = useInput(0);\r\n  const [navValue, onChangeNavValue, setNavValue] = useInput(0);\r\n  const {\r\n    data: myPartiesData,\r\n    error: myPartiesError,\r\n    mutate: myPartiesMutate,\r\n  } = useSWRRetry<Party[]>(\r\n    userData ? process.env.REACT_APP_DB_HOST + `/api/channels/${params.url}/parties/my/${userData.userId}` : null,\r\n    token.refreshToken,\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Tabs value={value} onChange={onChangeValue} aria-label=\"basic tabs example\">\r\n        {channels?.map((channel, key) => (\r\n          <Tab\r\n            label={channel.name}\r\n            id={`tab-${key}`}\r\n            key={key}\r\n            aria-controls={`tabpanel-${key}`}\r\n            onClick={() => {\r\n              setValue(key);\r\n              navigate(`/channels/${channel.url}/parties`);\r\n            }}\r\n          />\r\n        ))}\r\n      </Tabs>\r\n      <Outlet />\r\n      <BottomNavigation\r\n        showLabels\r\n        value={navValue}\r\n        onChange={(event, newValue) => {\r\n          setNavValue(newValue);\r\n        }}\r\n      >\r\n        {myPartiesData?.map((party, key) => (\r\n          <BottomNavigationAction\r\n            key={key}\r\n            label={party.name}\r\n            icon={\r\n              <Badge\r\n                badgeContent={\r\n                  <>\r\n                    {async () => {\r\n                      const res: number = await axios\r\n                        .get(process.env.REACT_APP_DB_HOST + `/api/channels/${params.url}/parties/${party.name}/unread`)\r\n                        .then((res) => res.data)\r\n                        .catch((err) => 0);\r\n                      return res;\r\n                    }}\r\n                  </>\r\n                }\r\n                color=\"primary\"\r\n              >\r\n                <MessageIcon />\r\n              </Badge>\r\n            }\r\n          />\r\n        ))}\r\n      </BottomNavigation>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Channels;\r\n"],"names":["DefaultValue","useState","value","setValue","useCallback","e","target","i","navigate","useNavigate","token","useCookies","useSWRRetry","process","refreshToken","userData","data","params","error","mutate","useParams","channels","useInput","onChangeValue","navValue","setNavValue","url","userId","myPartiesData","onChange","map","channel","key","label","name","id","onClick","showLabels","event","newValue","party","icon","badgeContent","axios","then","res","catch","err","color"],"sourceRoot":""}