{"version":3,"file":"992.js","mappings":"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","sources":["webpack://loatus_web/./hooks/useSWRRetry.ts","webpack://loatus_web/./hooks/useTokenAxios.ts","webpack://loatus_web/./pages/My/index.tsx"],"sourcesContent":["import useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport { StateMutator } from 'swr-global-state';\n\nconst useSWRRetry = <T = any>(url: string | null, refreshToken: string) =>\n  useSWR<T | null>(\n    url && localStorage.getItem('accessToken') ? [url, localStorage.getItem('accessToken')] : null,\n    fetcher,\n    {\n      onErrorRetry: (err, key, config, revalidate, { retryCount }) => {\n        if (retryCount < 3) {\n          axios\n            .post(\n              process.env.REACT_APP_DB_HOST + '/auth/reissue',\n              {},\n              {\n                withCredentials: false,\n                headers: {\n                  Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n                  refreshToken: refreshToken,\n                },\n              },\n            )\n            .then((res) => {\n              localStorage.setItem('accessToken', res.data.data);\n            })\n            .catch((error) => error);\n        }\n      },\n    },\n  );\n\nexport default useSWRRetry;\n","import axios from 'axios';\nimport { StateMutator } from 'swr-global-state';\n\nconst useTokenAxios = (refreshToken: string) => {\n  const tokenAxios = axios.create({\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n    },\n  });\n  tokenAxios.interceptors.response.use(\n    (response) => response,\n    (error) => {\n      axios\n        .post(\n          process.env.REACT_APP_DB_HOST + '/auth/reissue',\n          {},\n          {\n            withCredentials: false,\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n              refreshToken: refreshToken,\n            },\n          },\n        )\n        .then((res) => {\n          localStorage.setItem('accessToken', res.data.data);\n        })\n        .catch((error) => error);\n    },\n  );\n  return tokenAxios;\n};\n\nexport default useTokenAxios;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport useInput from '@hooks/useInput';\nimport { Link, Navigate, useSearchParams } from 'react-router-dom';\nimport { Button, Header, Horizon, Hr, Input, Page, PageHead, Root, SignIn } from '@pages/Login/styles';\nimport { APIItem, Friend, IToken, IUser } from '@typings/db';\nimport useSWR from 'swr';\nimport { useCookies } from 'react-cookie';\nimport { Row, Col, Form } from 'react-bootstrap';\nimport { Container, CircularProgress } from '@mui/material';\nimport { toast, ToastContainer } from 'react-toastify';\nimport useToken from '@hooks/useToken';\nimport useSWRRetry from '@hooks/useSWRRetry';\nimport useTokenAxios from '@hooks/useTokenAxios';\nimport { lostarkInfo } from '@typings/db';\nimport Avatar from '@mui/material/Avatar';\nimport gravatar from 'gravatar';\n\nconst My = () => {\n  const [token, setToken] = useCookies(['refreshToken']);\n  const accessToken = localStorage.getItem('accessToken');\n  const { data: userData, error, mutate } = useSWRRetry(process.env.REACT_APP_DB_HOST + '/auth/my', token.refreshToken);\n  const [params, setParams] = useSearchParams();\n  var toUserId = '1';\n  const [nickname, onChangeNickname, setNickname] = useInput('');\n  const [characterInfo, setCharacterInfo] = useState<lostarkInfo | null>();\n  const [friendList, setFriendList] = useState<Friend[] | null | undefined>();\n  const [friendRequestList, setFriendRequestList] = useState<Friend[] | null | undefined>();\n  const [friendId, setFriendId] = useState<number>(0);\n  //  const profileImage=\"\\\"\"+userData.profileImage+\"\\\"\";\n\n  console.log(friendList);\n  console.log(friendList && friendList[0]);\n  // console.log(friendList.length);\n\n  useEffect(() => {\n    axios\n      .post(\n        process.env.REACT_APP_DB_HOST + '/user/load/maincharacter',\n        {},\n        {\n          headers: {\n            Authorization: 'Bearer ' + accessToken,\n          },\n        },\n      )\n      .then((res) => {\n        setCharacterInfo(res.data.data);\n      })\n      .catch((err) => {\n        toast.error(err.message, {\n          position: 'top-right',\n        });\n      }),\n      [];\n  }, []);\n\n  useEffect(() => {\n    axios\n      .post(\n        '/friend/list',\n        {\n          toUserId,\n        },\n        {\n          headers: {\n            Authorization: 'Bearer ' + accessToken,\n          },\n        },\n      )\n      .then((res) => {\n        setFriendList(res.data.data);\n      })\n      .catch((err) => {\n        toast.error(err.message, {\n          position: 'top-right',\n        });\n      }),\n      [];\n  }, []);\n\n  useEffect(() => {\n    axios\n      .post(\n        '/friend/request/list',\n        {\n          toUserId,\n        },\n        {\n          headers: {\n            Authorization: 'Bearer ' + accessToken,\n          },\n        },\n      )\n      .then((res) => {\n        setFriendRequestList(res.data.data);\n      })\n      .catch((err) => {\n        toast.error(err.message, {\n          position: 'top-right',\n        });\n      }),\n      [];\n  }, []);\n\n  const onSubmitUpdateNickname = useCallback(\n    async (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      await useTokenAxios(token.refreshToken)\n        .post(\n          process.env.REACT_APP_DB_HOST + '/user/update/nickname',\n          {\n            nickname,\n          },\n          {\n            withCredentials: false,\n            headers: {\n              Authorization: 'Bearer ' + accessToken,\n            },\n          },\n        )\n        .then((response) => {\n          if (response.data.code === 200) {\n            toast.success('닉네임 변경이 성공했습니다.', {\n              position: 'top-right',\n            });\n          } else {\n            toast.error('닉네임 변경이 실패했습니다.', {\n              position: 'top-right',\n            });\n          }\n        })\n        .catch((error) => {\n          toast.error('닉네임 변경이 실패했습니다.', {\n            position: 'top-right',\n          });\n        });\n    },\n    [nickname],\n  );\n\n  const onSubmitDeleteUser = useCallback(async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    await useTokenAxios(token.refreshToken)\n      .post(\n        process.env.REACT_APP_DB_HOST + '/user/delete',\n        {},\n        {\n          withCredentials: false,\n          headers: {\n            Authorization: 'Bearer ' + accessToken,\n          },\n        },\n      )\n      .then((response) => {\n        if (response.data.code === 200) {\n          toast.success('회원탈퇴가 성공했습니다.', {\n            position: 'top-right',\n          });\n        } else {\n          toast.error('회원탈퇴가 실패했습니다.', {\n            position: 'top-right',\n          });\n        }\n      })\n      .catch((error) => {\n        toast.error('회원탈퇴가 실패했습니다.', {\n          position: 'top-right',\n        });\n      });\n  }, []);\n\n  const onSubmitDeleteFriend = useCallback(\n    async (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      await useTokenAxios(token.refreshToken)\n        .post(\n          '/friend/delete',\n          {\n            toUserId: friendId,\n          },\n          {\n            withCredentials: false,\n            headers: {\n              Authorization: 'Bearer ' + accessToken,\n            },\n          },\n        )\n        .then((response) => {\n          if (response.data.code === 200) {\n            toast.success('친구삭제가 성공했습니다.', {\n              position: 'top-right',\n            });\n          } else {\n            toast.error('친구삭제가 실패했습니다.', {\n              position: 'top-right',\n            });\n          }\n        })\n        .catch((error) => {\n          toast.error('친구삭제가 실패했습니다.', {\n            position: 'top-right',\n          });\n        });\n    },\n    [friendId],\n  );\n\n  const onSubmitAcceptFriend = useCallback(\n    async (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      await useTokenAxios(token.refreshToken)\n        .post(\n          '/friend/accept',\n          {\n            toUserId: friendId,\n          },\n          {\n            withCredentials: false,\n            headers: {\n              Authorization: 'Bearer ' + accessToken,\n            },\n          },\n        )\n        .then((response) => {\n          if (response.data.code === 200) {\n            toast.success('친구수락이 성공했습니다.', {\n              position: 'top-right',\n            });\n          } else {\n            toast.error('친구수락이 실패했습니다.', {\n              position: 'top-right',\n            });\n          }\n        })\n        .catch((error) => {\n          toast.error('친구수락이 실패했습니다.', {\n            position: 'top-right',\n          });\n        });\n    },\n    [friendId],\n  );\n\n  const onSubmitRefuseFriend = useCallback(\n    async (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      await useTokenAxios(token.refreshToken)\n        .post(\n          '/friend/refuse',\n          {\n            toUserId: friendId,\n          },\n          {\n            withCredentials: false,\n            headers: {\n              Authorization: 'Bearer ' + accessToken,\n            },\n          },\n        )\n        .then((response) => {\n          if (response.data.code === 200) {\n            toast.success('친구거절이 성공했습니다.', {\n              position: 'top-right',\n            });\n          } else {\n            toast.error('친구거절이 실패했습니다.', {\n              position: 'top-right',\n            });\n          }\n        })\n        .catch((error) => {\n          toast.error('친구거절이 실패했습니다.', {\n            position: 'top-right',\n          });\n        });\n    },\n    [friendId],\n  );\n\n  if (!userData) {\n    return <Navigate to={'/login'} />;\n  }\n\n  return (\n    <Root>\n      <Container maxWidth={false}>\n        <Row>\n          <table>\n            <tr>\n              <td>프로필 사진</td>\n              <td>\n                <Avatar\n                  alt={userData?.characterName || userData?.nickname}\n                  src={userData?.profileImage || gravatar.url(userData.email, { s: '25', d: 'retro' })}\n                />\n              </td>\n            </tr>\n\n            <tr>\n              <td>캐릭터명</td>\n              <td>{characterInfo?.CharacterName}</td>\n            </tr>\n\n            <tr>\n              <td>아이템 레벨</td>\n              <td>{characterInfo?.ItemAvgLevel}</td>\n            </tr>\n\n            <tr>\n              <td>클래스</td>\n              <td>{characterInfo?.CharacterClassName}</td>\n            </tr>\n\n            <tr>\n              <td>서버명</td>\n              <td>{characterInfo?.ServerName}</td>\n            </tr>\n\n            <tr>\n              <td>닉네임</td>\n              <td>{userData?.nickname}</td>\n            </tr>\n\n            {/* <tr>\n              <td>친구 수</td>\n              <td>{friendList && friendList[0].friendCount}</td>\n            </tr> */}\n          </table>\n\n          <Form onSubmit={onSubmitUpdateNickname}>\n            <Input placeholder={'닉네임'} type=\"input\" value={nickname} onChange={onChangeNickname} />\n            <Button type=\"submit\">변경</Button>\n          </Form>\n\n          <Form onSubmit={onSubmitDeleteUser}>\n            <Button type=\"submit\">회원탈퇴</Button>\n          </Form>\n        </Row>\n      </Container>\n\n      <Container maxWidth={false}>\n        <table>\n          <tr>\n            <th>친구 목록</th>\n            <th></th>\n            <th></th>\n          </tr>\n          {friendList ? (\n            friendList.map((friend, key) => {\n              return (\n                <tr>\n                  <td>{friend.nickname}</td>\n                  <td>{friend.characterName}</td>\n                  <td>\n                    <Form onSubmit={onSubmitDeleteFriend}>\n                      <Button type=\"submit\" onClick={() => setFriendId(friend.userId)}>\n                        삭제\n                      </Button>\n                    </Form>\n                  </td>\n                  <td>\n                    <Form>\n                      <Button type=\"submit\">채팅</Button>\n                    </Form>\n                  </td>\n                </tr>\n              );\n            })\n          ) : (\n            <tr>\n              <td colSpan={1}>\n                <CircularProgress />\n              </td>\n            </tr>\n          )}\n        </table>\n\n        <table>\n          <tr>\n            <th>친구요청 목록</th>\n            <th></th>\n            <th></th>\n            <th></th>\n          </tr>\n          {friendRequestList ? (\n            friendRequestList.map((friend, key) => {\n              return (\n                <tr>\n                  <td>\n                    {friend.nickname}({friend.characterName})\n                  </td>\n                  <td>\n                    <Form onSubmit={onSubmitAcceptFriend}>\n                      <Button type=\"submit\" onClick={() => setFriendId(friend.userId)}>\n                        수락\n                      </Button>\n                    </Form>\n                  </td>\n                  <td>\n                    <Form onSubmit={onSubmitRefuseFriend}>\n                      <Button type=\"submit\" onClick={() => setFriendId(friend.userId)}>\n                        거절\n                      </Button>\n                    </Form>\n                  </td>\n                  <td></td>\n                </tr>\n              );\n            })\n          ) : (\n            <tr>\n              <td colSpan={1}>\n                <CircularProgress />\n              </td>\n            </tr>\n          )}\n        </table>\n      </Container>\n    </Root>\n  );\n};\n\nexport default My;\n"],"names":["url","refreshToken","useSWR","localStorage","getItem","fetcher","onErrorRetry","err","key","config","revalidate","retryCount","axios","process","withCredentials","headers","Authorization","then","res","setItem","data","catch","error","tokenAxios","interceptors","response","use","i","useCookies","token","accessToken","useSWRRetry","userData","mutate","useSearchParams","useInput","nickname","onChangeNickname","useState","characterInfo","setCharacterInfo","friendList","setFriendList","friendRequestList","setFriendRequestList","friendId","setFriendId","console","log","useEffect","toast","message","position","toUserId","onSubmitUpdateNickname","useCallback","e","preventDefault","useTokenAxios","post","code","onSubmitDeleteUser","onSubmitDeleteFriend","onSubmitAcceptFriend","onSubmitRefuseFriend","maxWidth","alt","characterName","src","profileImage","gravatar","email","s","d","CharacterName","ItemAvgLevel","CharacterClassName","ServerName","onSubmit","placeholder","type","value","onChange","map","friend","onClick","userId","colSpan","to"],"sourceRoot":""}