{"version":3,"file":"992.js","mappings":"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","sources":["webpack://loatus_web/./hooks/useSWRRetry.ts","webpack://loatus_web/./hooks/useTokenAxios.ts","webpack://loatus_web/./pages/My/index.tsx"],"sourcesContent":["import useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport { StateMutator } from 'swr-global-state';\n\nconst useSWRRetry = <T = any>(url: string | null, refreshToken: string) =>\n  useSWR<T | null>(\n    url && localStorage.getItem('accessToken') ? [url, localStorage.getItem('accessToken')] : null,\n    fetcher,\n    {\n      onErrorRetry: (err, key, config, revalidate, { retryCount }) => {\n        if (retryCount < 3) {\n          axios\n            .post(\n              '/auth/reissue',\n              {},\n              {\n                withCredentials: true,\n                headers: {\n                  Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n                  refreshToken: refreshToken,\n                },\n              },\n            )\n            .then((res) => {\n              localStorage.setItem('accessToken', res.data.data);\n            })\n            .catch((error) => error);\n        }\n      },\n    },\n  );\n\nexport default useSWRRetry;\n","import axios from 'axios';\r\nimport { StateMutator } from 'swr-global-state';\r\n\r\nconst useTokenAxios = (refreshToken: string) => {\r\n  const tokenAxios = axios.create();\r\n  tokenAxios.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n      axios\r\n        .post(\r\n          '/auth/reissue',\r\n          {},\r\n          {\r\n            withCredentials: true,\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\r\n              refreshToken: refreshToken,\r\n            },\r\n          },\r\n        )\r\n        .then((res) => {\r\n          localStorage.setItem('accessToken', res.data.data);\r\n        })\r\n        .catch((error) => error);\r\n    },\r\n  );\r\n  return tokenAxios;\r\n};\r\n\r\nexport default useTokenAxios;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport useInput from '@hooks/useInput';\r\nimport { Link, Navigate, useSearchParams } from 'react-router-dom';\r\nimport { Button, Header, Horizon, Hr, Input, Page, PageHead, Root, SignIn } from '@pages/Login/styles';\r\nimport { APIItem, Friend, IToken, IUser } from '@typings/db';\r\nimport useSWR from 'swr';\r\nimport { useCookies } from 'react-cookie';\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\nimport { Container,CircularProgress } from '@mui/material';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport useToken from '@hooks/useToken';\r\nimport useSWRRetry from '@hooks/useSWRRetry';\r\nimport useTokenAxios from '@hooks/useTokenAxios';\r\nimport { lostarkInfo } from '@typings/db';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport gravatar from 'gravatar';\r\n\r\nconst My = () => {\r\n  const [token, setToken] = useCookies(['refreshToken']);\r\n  const accessToken = localStorage.getItem('accessToken');\r\n  const { data: userData, error, mutate } = useSWRRetry('/auth/my', token.refreshToken);\r\n  const [params, setParams] = useSearchParams();\r\n  var toUserId = '1';\r\n  const [nickname, onChangeNickname, setNickname] = useInput('');\r\n  const [characterInfo, setCharacterInfo] = useState<lostarkInfo|null>();\r\n  const [friendList, setFriendList] = useState<Friend[]|null|undefined>();\r\n  const [friendRequestList, setFriendRequestList] = useState<Friend[]|null|undefined>();\r\n  const [friendId, setFriendId] = useState<number>(0);\r\n  //  const profileImage=\"\\\"\"+userData.profileImage+\"\\\"\";\r\n\r\n  console.log(friendList);\r\n  console.log(friendList && friendList[0]);\r\n  // console.log(friendList.length);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(\r\n        '/user/load/maincharacter',\r\n        {},\r\n        {\r\n          headers: {\r\n            Authorization: 'Bearer ' + accessToken,\r\n          },\r\n        },\r\n      )\r\n      .then((res) => {\r\n        setCharacterInfo(res.data.data);\r\n      })\r\n      .catch((err) => {\r\n        toast.error(err.message, {\r\n          position: 'top-right',\r\n        });\r\n      }),\r\n      [];\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(\r\n        '/friend/list',\r\n        {\r\n          toUserId,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: 'Bearer ' + accessToken,\r\n          },\r\n        },\r\n      )\r\n      .then((res) => {\r\n        setFriendList(res.data.data);\r\n      })\r\n      .catch((err) => {\r\n        toast.error(err.message, {\r\n          position: 'top-right',\r\n        });\r\n      }),\r\n      [];\r\n  }, []);\r\n\r\n\r\n\r\n  \r\n  useEffect(() => {\r\n    axios\r\n      .post(\r\n        '/friend/request/list',\r\n        {\r\n          toUserId,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: 'Bearer ' + accessToken,\r\n          },\r\n        },\r\n      )\r\n      .then((res) => {\r\n        setFriendRequestList(res.data.data);\r\n      })\r\n      .catch((err) => {\r\n        toast.error(err.message, {\r\n          position: 'top-right',\r\n        });\r\n      }),\r\n      [];\r\n  }, []);\r\n\r\n\r\n  const onSubmitUpdateNickname = useCallback(\r\n    async (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      await useTokenAxios(token.refreshToken)\r\n        .post(\r\n          '/user/update/nickname',\r\n          {\r\n            nickname,\r\n          },\r\n          {\r\n            withCredentials: true,\r\n            headers: {\r\n              Authorization: 'Bearer ' + accessToken,\r\n            },\r\n          },\r\n        )\r\n        .then((response) => {\r\n          if (response.data.code === 200) {\r\n            toast.success('닉네임 변경이 성공했습니다.', {\r\n              position: 'top-right',\r\n            });\r\n          } else {\r\n            toast.error('닉네임 변경이 실패했습니다.', {\r\n              position: 'top-right',\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          toast.error('닉네임 변경이 실패했습니다.', {\r\n            position: 'top-right',\r\n          });\r\n        });\r\n    },\r\n    [nickname],\r\n  );\r\n\r\n  const onSubmitDeleteUser= useCallback(\r\n    async (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      await useTokenAxios(token.refreshToken)\r\n        .post(\r\n          '/user/delete',\r\n          {\r\n          },\r\n          {\r\n            withCredentials: true,\r\n            headers: {\r\n              Authorization: 'Bearer ' + accessToken,\r\n            },\r\n          },\r\n        )\r\n        .then((response) => {\r\n          if (response.data.code === 200) {\r\n            toast.success('회원탈퇴가 성공했습니다.', {\r\n              position: 'top-right',\r\n            });\r\n          } else {\r\n            toast.error('회원탈퇴가 실패했습니다.', {\r\n              position: 'top-right',\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          toast.error('회원탈퇴가 실패했습니다.', {\r\n            position: 'top-right',\r\n          });\r\n        });\r\n    },\r\n    [],\r\n  );\r\n\r\n  const onSubmitDeleteFriend= useCallback(\r\n    async (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      await useTokenAxios(token.refreshToken)\r\n        .post(\r\n          '/friend/delete',\r\n          {\r\n            toUserId:friendId\r\n          },\r\n          {\r\n            withCredentials: true,\r\n            headers: {\r\n              Authorization: 'Bearer ' + accessToken,\r\n            },\r\n          },\r\n        )\r\n        .then((response) => {\r\n          if (response.data.code === 200) {\r\n            toast.success('친구삭제가 성공했습니다.', {\r\n              position: 'top-right',\r\n            });\r\n          } else {\r\n            toast.error('친구삭제가 실패했습니다.', {\r\n              position: 'top-right',\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          toast.error('친구삭제가 실패했습니다.', {\r\n            position: 'top-right',\r\n          });\r\n        });\r\n    },\r\n    [friendId],\r\n  );\r\n\r\n\r\n  const onSubmitAcceptFriend= useCallback(\r\n    async (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      await useTokenAxios(token.refreshToken)\r\n        .post(\r\n          '/friend/accept',\r\n          {\r\n            toUserId:friendId\r\n          },\r\n          {\r\n            withCredentials: true,\r\n            headers: {\r\n              Authorization: 'Bearer ' + accessToken,\r\n            },\r\n          },\r\n        )\r\n        .then((response) => {\r\n          if (response.data.code === 200) {\r\n            toast.success('친구수락이 성공했습니다.', {\r\n              position: 'top-right',\r\n            });\r\n          } else {\r\n            toast.error('친구수락이 실패했습니다.', {\r\n              position: 'top-right',\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          toast.error('친구수락이 실패했습니다.', {\r\n            position: 'top-right',\r\n          });\r\n        });\r\n    },\r\n    [friendId],\r\n  );\r\n\r\n\r\n  const onSubmitRefuseFriend= useCallback(\r\n    async (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      await useTokenAxios(token.refreshToken)\r\n        .post(\r\n          '/friend/refuse',\r\n          {\r\n            toUserId:friendId\r\n          },\r\n          {\r\n            withCredentials: true,\r\n            headers: {\r\n              Authorization: 'Bearer ' + accessToken,\r\n            },\r\n          },\r\n        )\r\n        .then((response) => {\r\n          if (response.data.code === 200) {\r\n            toast.success('친구거절이 성공했습니다.', {\r\n              position: 'top-right',\r\n            });\r\n          } else {\r\n            toast.error('친구거절이 실패했습니다.', {\r\n              position: 'top-right',\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          toast.error('친구거절이 실패했습니다.', {\r\n            position: 'top-right',\r\n          });\r\n        });\r\n    },\r\n    [friendId],\r\n  );\r\n\r\n\r\n\r\n  \r\n\r\n\r\n  if (!userData) {\r\n    return <Navigate to={'/login'} />;\r\n  }\r\n\r\n  return (\r\n    <Root>\r\n      <Container maxWidth={false}>\r\n        <Row>\r\n          <table>\r\n            <tr>\r\n              <td>프로필 사진</td>\r\n              <td>\r\n                <Avatar\r\n                  alt={userData?.characterName || userData?.nickname}\r\n                  src={userData?.profileImage || gravatar.url(userData.email, { s: '25', d: 'retro' })}\r\n                />\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>캐릭터명</td>\r\n              <td>{characterInfo?.CharacterName}</td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>아이템 레벨</td>\r\n              <td>{characterInfo?.ItemAvgLevel}</td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>클래스</td>\r\n              <td>{characterInfo?.CharacterClassName}</td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>서버명</td>\r\n              <td>{characterInfo?.ServerName}</td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>닉네임</td>\r\n              <td>{userData?.nickname}</td>\r\n            </tr>\r\n\r\n\r\n            {/* <tr>\r\n              <td>친구 수</td>\r\n              <td>{friendList && friendList[0].friendCount}</td>\r\n            </tr> */}\r\n          </table>\r\n\r\n        \r\n          <Form onSubmit={onSubmitUpdateNickname}>\r\n            <Input placeholder={'닉네임'} type=\"input\" value={nickname} onChange={onChangeNickname} />\r\n            <Button type=\"submit\">변경</Button>\r\n          </Form>\r\n\r\n          <Form onSubmit={onSubmitDeleteUser}>\r\n            <Button type=\"submit\">회원탈퇴</Button>\r\n          </Form>\r\n        </Row>\r\n      </Container>\r\n\r\n      <Container maxWidth={false}>\r\n      <table>\r\n            <tr>\r\n            <th>친구 목록</th>\r\n            <th></th>\r\n            <th></th>\r\n            </tr>\r\n            {friendList ? (\r\n            friendList.map((friend, key) => {\r\n              return (\r\n                <tr>\r\n                  <td>{friend.nickname}</td>\r\n                  <td>{friend.characterName}</td>\r\n                  <td>\r\n                  <Form onSubmit={onSubmitDeleteFriend}>\r\n                  <Button type=\"submit\" onClick={() => setFriendId(friend.userId)}>삭제</Button>\r\n                  </Form>\r\n                  </td>\r\n                  <td>\r\n                  <Form>\r\n                  <Button type=\"submit\">채팅</Button>\r\n                  </Form>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })\r\n          ) : (\r\n            <tr>\r\n              <td colSpan={1}>\r\n                <CircularProgress />\r\n              </td>\r\n            </tr>\r\n          )}\r\n           \r\n            \r\n          </table>\r\n\r\n          <table>\r\n            <tr>\r\n            <th>친구요청 목록</th>\r\n            <th></th>\r\n            <th></th>\r\n            <th></th>\r\n            </tr>\r\n            {friendRequestList ? (\r\n            friendRequestList.map((friend, key) => {\r\n              return (\r\n                <tr>\r\n                  <td>{friend.nickname}({friend.characterName})</td>\r\n                  <td>\r\n                  <Form onSubmit={onSubmitAcceptFriend}>\r\n                  <Button type=\"submit\" onClick={() => setFriendId(friend.userId)}>수락</Button>\r\n                  </Form>\r\n                  </td>\r\n                  <td>\r\n                  <Form onSubmit={onSubmitRefuseFriend}>\r\n                  <Button type=\"submit\" onClick={() => setFriendId(friend.userId)}>거절</Button>\r\n                  </Form>\r\n                  </td>\r\n                  <td></td>\r\n                </tr>\r\n              );\r\n            })\r\n          ) : (\r\n            <tr>\r\n              <td colSpan={1}>\r\n                <CircularProgress />\r\n              </td>\r\n            </tr>\r\n          )}\r\n           \r\n            \r\n          </table>\r\n\r\n \r\n      </Container>\r\n    </Root>\r\n  );\r\n};\r\n\r\nexport default My;\r\n"],"names":["url","refreshToken","useSWR","localStorage","getItem","fetcher","onErrorRetry","err","key","config","revalidate","retryCount","axios","withCredentials","headers","Authorization","then","res","setItem","data","catch","error","tokenAxios","interceptors","response","use","i","useCookies","token","accessToken","useSWRRetry","userData","mutate","useSearchParams","useInput","nickname","onChangeNickname","useState","characterInfo","setCharacterInfo","friendList","setFriendList","friendRequestList","setFriendRequestList","friendId","setFriendId","console","log","useEffect","toast","message","position","toUserId","onSubmitUpdateNickname","useCallback","e","preventDefault","useTokenAxios","post","code","onSubmitDeleteUser","onSubmitDeleteFriend","onSubmitAcceptFriend","onSubmitRefuseFriend","maxWidth","alt","characterName","src","profileImage","gravatar","email","s","d","CharacterName","ItemAvgLevel","CharacterClassName","ServerName","onSubmit","placeholder","type","value","onChange","map","friend","onClick","userId","colSpan","to"],"sourceRoot":""}