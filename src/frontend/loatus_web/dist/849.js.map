{"version":3,"file":"849.js","mappings":"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","sources":["webpack://loatus_web/./hooks/useInput.ts","webpack://loatus_web/./hooks/useSWRRetry.ts","webpack://loatus_web/./hooks/useSocket.ts","webpack://loatus_web/./pages/PartyPage/styles.ts","webpack://loatus_web/./components/Chat/index.tsx","webpack://loatus_web/./components/ChatList/index.tsx","webpack://loatus_web/./components/ChatBox/index.tsx","webpack://loatus_web/./pages/PartyPage/index.tsx","webpack://loatus_web/./utils/fetcher.ts"],"sourcesContent":["import {useState, useCallback, ChangeEvent, Dispatch} from \"react\";\r\nimport React from \"react\";\r\n\r\ntype ReturnTypes<T = any> = [T, (e:any)=>void, Dispatch<React.SetStateAction<T>>];\r\nconst useInput = <T = any>(DefaultValue: T):ReturnTypes => {\r\n    const [value, setValue] = useState<T>(DefaultValue);\r\n    const onChangeValue = useCallback((e:any)=>{\r\n        setValue(e.target.value);\r\n    }, [setValue])\r\n    return [value, onChangeValue, setValue]\r\n}\r\n\r\nexport default useInput;","import useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport { StateMutator } from 'swr-global-state';\n\nconst useSWRRetry = <T = any>(url: string | null, refreshToken: string) =>\n  useSWR<T | null>(\n    url && localStorage.getItem('accessToken') ? [url, localStorage.getItem('accessToken')] : null,\n    fetcher,\n    {\n      onErrorRetry: (err, key, config, revalidate, { retryCount }) => {\n        if (retryCount < 3) {\n          axios\n            .post(\n              '/auth/reissue',\n              {},\n              {\n                withCredentials: true,\n                headers: {\n                  Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n                  refreshToken: refreshToken,\n                },\n              },\n            )\n            .then((res) => {\n              localStorage.setItem('accessToken', res.data.data);\n            })\n            .catch((error) => error);\n        }\n      },\n    },\n  );\n\nexport default useSWRRetry;\n","import { io, Socket } from 'socket.io-client';\nimport { useCallback } from 'react';\n\nconst backUrl = 'http://localhost:8090';\n\nconst sockets: { [key: string]: Socket } = {};\nconst useSocket = (Channel?: string): [Socket | undefined, () => void] => {\n  console.log('rerender', Channel);\n  const disconnect = useCallback(() => {\n    if (Channel) {\n      sockets[Channel].disconnect();\n      delete sockets[Channel];\n    }\n  }, [Channel]);\n  if (!Channel) {\n    return [undefined, disconnect];\n  }\n  if (!sockets[Channel]) {\n    sockets[Channel] = io(`${backUrl}/ws-${Channel}`, {\n      transports: ['websocket'],\n    });\n  }\n\n  return [sockets[Channel], disconnect];\n};\n\nexport default useSocket;\n","import styled from '@emotion/styled';\nimport Box from '@mui/material/Box';\n\nexport const ModalBox = styled(Box)`\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: aliceblue;\n  border: 2px solid #000;\n  boxshadow: 24;\n  p: 4;\n  padding: 5px;\n`;\n","import React, { FC, memo } from 'react';\nimport { IChat } from '@typings/partyDB';\nimport Box from '@mui/material/Box';\nimport { Avatar, Grid, ListItem, ListItemAvatar, ListItemText, Typography } from '@mui/material';\nimport gravatar from 'gravatar';\nimport ReactTimeAgo from 'react-time-ago';\n\ntype Props = {\n  data: IChat;\n};\n\nconst Chat: FC<Props> = ({ data }) => {\n  return (\n    <ListItem>\n      <ListItemAvatar>\n        <Avatar src={data.User.profileImage || gravatar.url(data.User.email, { d: 'retro' })} />\n      </ListItemAvatar>\n      <ListItemText\n        primary={data.content}\n        secondary={\n          <React.Fragment>\n            <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\n              {data.User.characterName || data.User.nickname}\n            </Typography>\n            - <ReactTimeAgo date={data.createdAt} />\n          </React.Fragment>\n        }\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(Chat);\n","import React, { FC } from 'react';\nimport useSWRRetry from '@hooks/useSWRRetry';\nimport { useCookies } from 'react-cookie';\nimport { IChat } from '@typings/partyDB';\nimport Chat from '@components/Chat';\nimport List from '@mui/material/List';\nimport Scrollbars from 'react-custom-scrollbars-2';\nimport dayjs from 'dayjs';\n\ntype Props = {\n  url: string | undefined;\n  name: string;\n};\n\nconst ChatList: FC<Props> = (data) => {\n  const [token] = useCookies(['refreshToken']);\n  const {\n    data: ChatData,\n    error: ChatError,\n    mutate: ChatMutate,\n  } = useSWRRetry<IChat[]>(\n    data.url !== undefined ? `/api/channels/${data.url}/parties/${data.name}/chats?perPage=20&page=1` : null,\n    token.refreshToken,\n  );\n\n  return (\n    <List sx={{ height: '500px', overflow: 'auto' }}>\n      {ChatData?.sort((a, b) => dayjs(a.createdAt).diff(b.createdAt)).map((chat, key) => (\n        <Chat data={chat} key={key}></Chat>\n      ))}\n    </List>\n  );\n};\n\nexport default ChatList;\n","import React, { FC, useCallback } from 'react';\nimport { FilledInput, FormControl, IconButton, InputAdornment, TextField } from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport useInput from '@hooks/useInput';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport useSWRRetry from '@hooks/useSWRRetry';\nimport { IChat } from '@typings/partyDB';\nimport { useCookies } from 'react-cookie';\n\ntype Props = {\n  url: string | undefined;\n  name: string;\n};\n\nconst ChatBox: FC<Props> = (data) => {\n  const accessToken = localStorage.getItem('accessToken');\n  const [token] = useCookies(['refreshToken']);\n  const [comment, onChangeComment, setComment] = useInput('');\n  const {\n    data: ChatData,\n    error: ChatError,\n    mutate: ChatMutate,\n  } = useSWRRetry<IChat[]>(\n    data.url !== undefined ? `/api/channels/${data.url}/parties/${data.name}/chats?perPage=20&page=1` : null,\n    token.refreshToken,\n  );\n\n  const onSubmitComment = useCallback(\n    (e: any) => {\n      e.preventDefault();\n      if (!comment) {\n        toast.error('메시지 내용이 없습니다');\n        return;\n      }\n      axios\n        .post(\n          `/api/channels/${data.url}/parties/${data.name}/chats`,\n          {\n            content: comment,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${accessToken}`,\n            },\n          },\n        )\n        .then((res) => {\n          ChatMutate();\n          setComment('');\n        })\n        .catch((err) => {\n          toast.error(err.message);\n        });\n    },\n    [comment],\n  );\n\n  return (\n    <form onSubmit={onSubmitComment}>\n      <FormControl fullWidth variant=\"filled\">\n        <FilledInput\n          fullWidth\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <IconButton type={'submit'}>\n                <SendIcon />\n              </IconButton>\n            </InputAdornment>\n          }\n          value={comment}\n          onChange={onChangeComment}\n        />\n      </FormControl>\n    </form>\n  );\n};\n\nexport default ChatBox;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport List from '@mui/material/List';\nimport {\n  Avatar,\n  Button,\n  IconButton,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Modal,\n  SpeedDial,\n  SpeedDialIcon,\n  Tabs,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport { useCookies } from 'react-cookie';\nimport useSWRRetry from '@hooks/useSWRRetry';\nimport { IUser } from '@typings/db';\nimport { Party } from '@typings/partyDB';\nimport { useParams } from 'react-router';\nimport gravatar from 'gravatar';\nimport ReactTimeAgo from 'react-time-ago';\nimport useSocket from '@hooks/useSocket';\nimport { ModalBox } from '@pages/PartyPage/styles';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport ChatList from '@components/ChatList';\nimport ChatBox from '@components/ChatBox';\nimport { TabPane } from 'react-bootstrap';\nimport Box from '@mui/material/Box';\n\nconst PartyPage = () => {\n  const accessToken = localStorage.getItem('accessToken');\n  const [token] = useCookies(['refreshToken']);\n  const { data: userData, error: userError, mutate: userMutate } = useSWRRetry<IUser>('/auth/my', token.refreshToken);\n  const params = useParams();\n  const [openPostParty, setOpenPostParty] = useState(false);\n  const [openPartyChat, setOpenPartyChat] = useState(false);\n  const [partyName, onChangePartyName, setPartyName] = useInput('');\n  const [chatName, setChatName] = useState('');\n  const {\n    data: partiesData,\n    error: partiesError,\n    mutate: partiesMutate,\n  } = useSWRRetry<Party[]>(`/api/channels/${params.url}/parties`, token.refreshToken);\n  const {\n    data: myPartiesData,\n    error: myPartiesError,\n    mutate: myPartiesMutate,\n  } = useSWRRetry<Party[]>(\n    userData ? `/api/channels/${params.url}/parties/my/${userData.userId}` : null,\n    token.refreshToken,\n  );\n  const [socket, disconnect] = useSocket(params.url);\n\n  const handleClose = useCallback(() => {\n    setOpenPostParty(false);\n    setOpenPartyChat(false);\n    setPartyName('');\n  }, []);\n\n  const onSubmitParty = useCallback(\n    (e: any) => {\n      e.preventDefault();\n      if (!partyName) {\n        toast.error('파티 제목을 입력해 주세요.');\n        return;\n      }\n      axios\n        .post(\n          `/api/channels/${params.url}/parties`,\n          {\n            name: partyName,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${accessToken}`,\n            },\n          },\n        )\n        .then((res) => {\n          myPartiesMutate();\n          partiesMutate();\n          toast.success(res.data.message);\n          handleClose();\n          setPartyName('');\n        })\n        .catch((err) => {\n          toast.error(err.message);\n        });\n    },\n    [partyName],\n  );\n\n  useEffect(() => {\n    if (myPartiesData && userData && socket) {\n      socket.emit('login', { id: userData.userId, parties: myPartiesData.map((v) => v.id) });\n    }\n  }, [socket, myPartiesData, userData]);\n\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, [params.url, disconnect]);\n\n  return (\n    <Box height={'600px'} overflow={'auto'}>\n      <List>\n        {partiesData?.map((party, key) => (\n          <ListItem\n            key={key}\n            alignItems=\"flex-start\"\n            secondaryAction={\n              <IconButton\n                edge={'end'}\n                aria-label={'comments'}\n                onClick={() => {\n                  setOpenPartyChat(true);\n                  setPartyName(party.name);\n                }}\n              >\n                <CommentIcon />\n              </IconButton>\n            }\n          >\n            <ListItemAvatar>\n              <Avatar alt={party.Owner.nickname} src={party.Owner.profileImage || gravatar.url(party.Owner.email)} />\n            </ListItemAvatar>\n            <ListItemText\n              primary={<React.Fragment>{party.name}</React.Fragment>}\n              secondary={\n                <React.Fragment>\n                  <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\n                    {party.Owner.characterName || party.Owner.nickname}\n                  </Typography>\n                  <Typography variant={'body2'}></Typography>\n                  <Typography>\n                    <ReactTimeAgo date={party.createdAt} />\n                  </Typography>\n                </React.Fragment>\n              }\n            />\n          </ListItem>\n        ))}\n      </List>\n      <SpeedDial\n        ariaLabel=\"SpeedDial basic example\"\n        sx={{ position: 'absolute', bottom: 50, right: 50 }}\n        icon={<SpeedDialIcon />}\n        onClick={() => {\n          setOpenPostParty(true);\n        }}\n      />\n      <Modal\n        open={openPostParty}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <ModalBox position={'absolute'}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            파티 정보를 입력하세요.\n          </Typography>\n          <form onSubmit={onSubmitParty}>\n            <TextField\n              id=\"standard-basic\"\n              label=\"파티제목\"\n              variant=\"standard\"\n              value={partyName}\n              onChange={onChangePartyName}\n            />\n            <Button type=\"submit\">생성하기</Button>\n          </form>\n        </ModalBox>\n      </Modal>\n      <Modal\n        open={openPartyChat}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <ModalBox position={'absolute'} width={'800px'} height={'600px'}>\n          <ChatList url={params.url} name={partyName} />\n          <ChatBox url={params.url} name={partyName} />\n        </ModalBox>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default PartyPage;\n","import axios from 'axios';\r\n\r\nconst fetcher = async ([url, token]: string[]) => {\r\n  const res = await axios\r\n    .get(url, {\r\n      withCredentials: true,\r\n      headers: token\r\n        ? {\r\n            Authorization: `Bearer ${token}`,\r\n          }\r\n        : {},\r\n    })\r\n    .then((response) => response.data.data)\r\n    .catch((error) => null);\r\n  if (res === null) {\r\n    const error = new Error('errro');\r\n    throw error;\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nexport default fetcher;\r\n"],"names":["DefaultValue","useState","value","setValue","useCallback","e","target","url","refreshToken","useSWR","localStorage","getItem","fetcher","onErrorRetry","err","key","config","revalidate","retryCount","axios","withCredentials","headers","Authorization","then","res","setItem","data","catch","error","sockets","ModalBox","styled","Box","Chat","ListItem","ListItemAvatar","Avatar","src","User","profileImage","gravatar","email","d","ListItemText","primary","content","secondary","Typography","sx","display","component","variant","color","characterName","nickname","ReactTimeAgo","date","createdAt","memo","token","useCookies","useSWRRetry","undefined","name","ChatData","mutate","List","height","overflow","sort","a","b","dayjs","diff","map","chat","accessToken","useInput","comment","onChangeComment","setComment","ChatMutate","onSubmitComment","preventDefault","toast","message","onSubmit","FormControl","fullWidth","FilledInput","endAdornment","InputAdornment","position","IconButton","type","Send","onChange","userData","params","useParams","openPostParty","setOpenPostParty","openPartyChat","setOpenPartyChat","partyName","onChangePartyName","setPartyName","partiesData","partiesMutate","userId","myPartiesData","myPartiesMutate","Channel","console","log","disconnect","io","transports","useSocket","socket","handleClose","onSubmitParty","useEffect","emit","id","parties","v","party","alignItems","secondaryAction","edge","onClick","Comment","alt","Owner","SpeedDial","ariaLabel","bottom","right","icon","SpeedDialIcon","Modal","open","onClose","TextField","label","Button","width","response","Error"],"sourceRoot":""}