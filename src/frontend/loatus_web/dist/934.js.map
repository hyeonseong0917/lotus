{"version":3,"file":"934.js","mappings":";g7CAqLA,QAnJa,WACX,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACf,GAIIC,EAAAA,EAAAA,IAAgBC,qFAAgC,SAAH,OAAYH,EAAOI,IAAMC,EAAAA,GAHlEC,EAAQ,EAAdC,KAEQC,GADQ,EAAhBC,MACkB,EAAlBC,QAEIC,EAAcC,aAAaC,QAAQ,eAClCC,EAAqC,GAA5BC,EAAAA,EAAAA,GAAW,CAAC,iBAAgB,GAAhC,GACZ,GAA0CC,EAAAA,EAAAA,GAAYb,6FAA4CW,EAAMG,cAA1FC,EAAQ,EAAdX,KACmD,GAD9B,EAALE,MAAa,EAANC,OAC4B,GAAZS,EAAAA,EAAAA,GAAS,IAAG,IAApDC,EAAO,KAAEC,EAAe,KAAEC,EAAU,KAErCC,GAAkBC,EAAAA,EAAAA,cACtB,SAACC,GACCA,EAAEC,iBACGN,EAMAF,EAMLS,EAAAA,EAAAA,KAEIxB,mGACA,CACEyB,KAAM5B,EAAOI,GACbyB,KAAMT,GAER,CACEU,QAAS,CACPC,cAAe,UAAF,OAAYpB,MAI9BqB,MAAK,SAACC,GACLzB,IACAc,EAAW,GACb,IACCY,OAAM,SAACC,GACNC,EAAAA,GAAAA,MAAYD,EAAIE,QAAS,CACvBC,SAAU,aAEd,IA1BAF,EAAAA,GAAAA,MAAY,qBAAsB,CAChCE,SAAU,cAPZF,EAAAA,GAAAA,MAAY,oBAAqB,CAC/BE,SAAU,aAgChB,GACA,CAAClB,EAASpB,EAAQkB,EAAUP,IAGxB4B,GAAcf,EAAAA,EAAAA,cAAY,WACzBN,EAOLS,EAAAA,EAAAA,IACOxB,qFAAgC,cAAH,OAAiBH,EAAOI,IAAM,CAC9D0B,QAAS,CACPC,cAAe,UAAF,OAAYpB,MAG5BqB,MAAK,SAACC,GACLzB,GACF,IACC0B,OAAM,SAACC,GACNC,EAAAA,GAAAA,MAAYD,EAAIE,QAAS,CACvBC,SAAU,aAEd,IAnBAF,EAAAA,GAAAA,MAAY,qBAAsB,CAChCE,SAAU,aAmBhB,GAAG,CAACpB,EAAUP,EAAaX,IAE3B,OAAIM,EAEA,gCACE,gBAAC,IAAG,CAACkC,MAAO,KACV,gBAAC,IAAU,CAACC,QAAS,KAAMC,UAAW,KAAMC,WAAY,4BACrDrC,GAAYA,EAAS,GAAGsC,OAAOC,MAChC,gBAAC,IAAK,CAACC,aAAcxC,GAAYA,EAAS,GAAGsC,OAAOG,KAAKC,OAAQC,MAAO,WACtE,gBAAC,IAAU,CAACC,QAASX,GACnB,gBAAC,IAAO,SAId,gBAAC,IAAM,CAACW,QAAS,kBAAMpD,GAAU,EAAE,GAAE,SAEvC,gBAAC,KAAI,CAACqD,WAAS,EAACC,UAAW,QACzB,gBAAC,KAAI,CAACC,GAAI,EAAGC,MAAI,GACdhD,EAAS,GAAGsC,OAAOW,QAEtB,gBAAC,KAAI,CAACF,GAAI,EAAGC,MAAI,EAACE,UAAW,SAC3B,gBAAC,IAAY,CAACC,KAAMnD,EAAS,GAAGsC,OAAOc,mBAG3C,gBAAC,IAAK,CAACC,UAAW,EAAGC,GAAI,CAAEC,OAAQ,QAAST,UAAW,OAAQU,QAAS,OAAQC,aAAc,SAC5F,gBAAC,IAAG,KAAEzD,GAAYA,EAAS,GAAGsC,OAAOoB,UAEvC,2BACE,wBAAMC,SAAU1C,GACd,gBAAC,IAAW,CAAC2C,WAAS,EAACzB,QAAQ,UAC7B,gBAAC,IAAW,CACVyB,WAAS,EACTC,aACE,gBAAC,IAAc,CAAC7B,SAAS,OACvB,gBAAC,IAAU,CAAC8B,KAAM,UAChB,gBAAC,IAAQ,QAIfC,MAAOjD,EACPkD,SAAUjD,OAKlB,gBAAC,IAAO,MACR,gBAAC,IAAI,CAACuC,GAAI,CAAEpB,MAAO,OAAQ+B,QAAS,qBACM,iBAAhCjE,EAAS,GAAGsC,OAAO4B,UACzBlE,EAAS,GAAGsC,OAAO4B,SAASC,KAAI,SAACrD,EAASsD,GAAG,OAC3C,gBAAC,KAAQ,CAACC,WAAW,aAAaD,IAAKA,GACrC,gBAAC,IAAc,KACb,gBAAC,IAAM,CAACE,IAAI,aAAaC,IAAI,iCAE/B,gBAAC,IAAY,CACXC,QAAS1D,EAAQ2D,iBACjBC,UACE,gBAAC,WAAc,KACb,gBAAC,IAAU,CAACpB,GAAI,CAAEqB,QAAS,UAAYvC,UAAU,OAAOD,QAAQ,QAAQQ,MAAM,gBAC3E7B,EAAQ8D,sBAKR,MAKX,IACd,2JCvKA,QARiB,SAAUC,GACvB,QAAmD,MAAzBC,EAAAA,EAAAA,UAAYD,KAAa,o5BAA5Cd,EAAK,KAAEgB,EAAQ,KAItB,MAAO,CAAChB,GAHc7C,EAAAA,EAAAA,cAAY,SAACC,GAC/B4D,EAAS5D,EAAE6D,OAAOjB,MACtB,GAAG,CAACgB,IAC0BA,EAClC,qECwBA,QA5BoB,SAAUE,EAAoBtE,GAAoB,OACpEf,EAAAA,EAAAA,IACEqF,GAAO3E,aAAaC,QAAQ,eAAiB,CAAC0E,EAAK3E,aAAaC,QAAQ,gBAAkB,KAC1FR,EAAAA,EACA,CACEmF,aAAc,SAACrD,EAAKuC,EAAKe,EAAQC,EAAY,GAAY,EAAVC,WAC5B,GACfhE,EAAAA,EAAAA,KAEIxB,kGACA,CAAC,EACD,CACEyF,iBAAiB,EACjB9D,QAAS,CACPC,cAAe,UAAF,OAAYnB,aAAaC,QAAQ,gBAC9CI,aAAcA,KAInBe,MAAK,SAACC,GACLrB,aAAaiF,QAAQ,cAAe5D,EAAI1B,KAAKA,KAC/C,IACC2B,OAAM,SAACzB,GAAK,OAAKA,CAAK,GAE7B,GAEH,oSC/BH,2pNAqBA,QApBa,eADb,EACa,GADb,EACa,UAAG,2FAAkB,OADlC,EACgB,IADhB,4CACgB,IADhB,m2BACwB8E,EAAG,KAAEzE,EAAK,cACda,EAAAA,EAAAA,IACX4D,EAAK,CACRK,iBAAiB,EACjB9D,QAAShB,EACL,CACEiB,cAAe,UAAF,OAAYjB,IAE3B,CAAC,IAENkB,MAAK,SAAC8D,GAAQ,OAAKA,EAASvF,KAAKA,IAAI,IACrC2B,OAAM,SAACzB,GAAK,OAAK,IAAI,IAAC,OAVhB,GAWG,QAXNwB,EAAM,EAAH,MAWO,gBACkB,MAAlB,IAAI8D,MAAM,SACb,gCAGN9D,GAAG,iCAlBZ,OAkBY,SAlBZ,+KAmBC,gBAlBY","sources":["webpack://loatus_web/./components/Post/index.tsx","webpack://loatus_web/./hooks/useInput.ts","webpack://loatus_web/./hooks/useSWRRetry.ts","webpack://loatus_web/./utils/fetcher.ts"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { IPost } from '@typings/db';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\nimport { useNavigate, useParams } from 'react-router';\nimport {\n  Avatar,\n  Badge,\n  Button,\n  Divider,\n  FilledInput,\n  FormControl,\n  Grid,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Paper,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport Box from '@mui/material/Box';\nimport SendIcon from '@mui/icons-material/Send';\nimport List from '@mui/material/List';\nimport { ThumbUp } from '@mui/icons-material';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { useCookies } from 'react-cookie';\nimport useSWRRetry from '@hooks/useSWRRetry';\nimport { toast } from 'react-toastify';\nimport ReactTimeAgo from 'react-time-ago';\n\nconst Post = () => {\n  const navigate = useNavigate();\n  const params = useParams();\n  const {\n    data: PostData,\n    error: postError,\n    mutate: postMutate,\n  } = useSWR<IPost[]>(process.env.REACT_APP_DB_HOST + `/post/${params.id}`, fetcher);\n  const accessToken = localStorage.getItem('accessToken');\n  const [token] = useCookies(['refreshToken']);\n  const { data: userData, error, mutate } = useSWRRetry(process.env.REACT_APP_DB_HOST + '/auth/my', token.refreshToken);\n  const [comment, onChangeComment, setComment] = useInput('');\n\n  const onSubmitComment = useCallback(\n    (e: any) => {\n      e.preventDefault();\n      if (!comment) {\n        toast.error('빈 댓글을 등록할 수 없습니다.', {\n          position: 'top-right',\n        });\n        return;\n      }\n      if (!userData) {\n        toast.error('로그인 후에 이용할 수 있습니다.', {\n          position: 'top-right',\n        });\n        return;\n      }\n      axios\n        .post(\n          process.env.REACT_APP_DB_HOST + '/post/comment/',\n          {\n            post: params.id,\n            text: comment,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${accessToken}`,\n            },\n          },\n        )\n        .then((res) => {\n          postMutate();\n          setComment('');\n        })\n        .catch((err) => {\n          toast.error(err.message, {\n            position: 'top-right',\n          });\n        });\n    },\n    [comment, params, userData, accessToken],\n  );\n\n  const onClickLike = useCallback(() => {\n    if (!userData) {\n      toast.error('로그인 후에 이용할 수 있습니다.', {\n        position: 'top-right',\n      });\n      return;\n    }\n\n    axios\n      .get(process.env.REACT_APP_DB_HOST + `/post/like/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n      .then((res) => {\n        postMutate();\n      })\n      .catch((err) => {\n        toast.error(err.message, {\n          position: 'top-right',\n        });\n      });\n  }, [userData, accessToken, params]);\n\n  if (PostData)\n    return (\n      <>\n        <Box width={1000}>\n          <Typography variant={'h2'} component={'h2'} fontFamily={'Noto Sans KR, sans-serif'}>\n            {PostData && PostData[0].fields.title}\n            <Badge badgeContent={PostData && PostData[0].fields.like.length} color={'success'}>\n              <IconButton onClick={onClickLike}>\n                <ThumbUp></ThumbUp>\n              </IconButton>\n            </Badge>\n          </Typography>\n          <Button onClick={() => navigate(-1)}>뒤로가기</Button>\n        </Box>\n        <Grid container marginTop={'30px'}>\n          <Grid xs={4} item>\n            {PostData[0].fields.author}\n          </Grid>\n          <Grid xs={8} item textAlign={'right'}>\n            <ReactTimeAgo date={PostData[0].fields.published_date} />\n          </Grid>\n        </Grid>\n        <Paper elevation={3} sx={{ height: '350px', marginTop: '20px', padding: '30px', marginBottom: '20px' }}>\n          <Box>{PostData && PostData[0].fields.content}</Box>\n        </Paper>\n        <div>\n          <form onSubmit={onSubmitComment}>\n            <FormControl fullWidth variant=\"filled\">\n              <FilledInput\n                fullWidth\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton type={'submit'}>\n                      <SendIcon />\n                    </IconButton>\n                  </InputAdornment>\n                }\n                value={comment}\n                onChange={onChangeComment}\n              />\n            </FormControl>\n          </form>\n        </div>\n        <Divider />\n        <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n          {typeof PostData[0].fields.comments !== 'string' &&\n            PostData[0].fields.comments.map((comment, key) => (\n              <ListItem alignItems=\"flex-start\" key={key}>\n                <ListItemAvatar>\n                  <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n                </ListItemAvatar>\n                <ListItemText\n                  primary={comment.cur_user_comment}\n                  secondary={\n                    <React.Fragment>\n                      <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\n                        {comment.cur_user_nickname}\n                      </Typography>\n                    </React.Fragment>\n                  }\n                />\n              </ListItem>\n            ))}\n        </List>\n      </>\n    );\n  else return null;\n};\n\nexport default Post;\n","import {useState, useCallback, ChangeEvent, Dispatch} from \"react\";\r\nimport React from \"react\";\r\n\r\ntype ReturnTypes<T = any> = [T, (e:any)=>void, Dispatch<React.SetStateAction<T>>];\r\nconst useInput = <T = any>(DefaultValue: T):ReturnTypes => {\r\n    const [value, setValue] = useState<T>(DefaultValue);\r\n    const onChangeValue = useCallback((e:any)=>{\r\n        setValue(e.target.value);\r\n    }, [setValue])\r\n    return [value, onChangeValue, setValue]\r\n}\r\n\r\nexport default useInput;","import useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport { StateMutator } from 'swr-global-state';\n\nconst useSWRRetry = <T = any>(url: string | null, refreshToken: string) =>\n  useSWR<T | null>(\n    url && localStorage.getItem('accessToken') ? [url, localStorage.getItem('accessToken')] : null,\n    fetcher,\n    {\n      onErrorRetry: (err, key, config, revalidate, { retryCount }) => {\n        if (retryCount < 3) {\n          axios\n            .post(\n              process.env.REACT_APP_DB_HOST + '/auth/reissue',\n              {},\n              {\n                withCredentials: true,\n                headers: {\n                  Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n                  refreshToken: refreshToken,\n                },\n              },\n            )\n            .then((res) => {\n              localStorage.setItem('accessToken', res.data.data);\n            })\n            .catch((error) => error);\n        }\n      },\n    },\n  );\n\nexport default useSWRRetry;\n","import axios from 'axios';\r\n\r\nconst fetcher = async ([url, token]: string[]) => {\r\n  const res = await axios\r\n    .get(url, {\r\n      withCredentials: true,\r\n      headers: token\r\n        ? {\r\n            Authorization: `Bearer ${token}`,\r\n          }\r\n        : {},\r\n    })\r\n    .then((response) => response.data.data)\r\n    .catch((error) => null);\r\n  if (res === null) {\r\n    const error = new Error('errro');\r\n    throw error;\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nexport default fetcher;\r\n"],"names":["navigate","useNavigate","params","useParams","useSWR","process","id","fetcher","PostData","data","postMutate","error","mutate","accessToken","localStorage","getItem","token","useCookies","useSWRRetry","refreshToken","userData","useInput","comment","onChangeComment","setComment","onSubmitComment","useCallback","e","preventDefault","axios","post","text","headers","Authorization","then","res","catch","err","toast","message","position","onClickLike","width","variant","component","fontFamily","fields","title","badgeContent","like","length","color","onClick","container","marginTop","xs","item","author","textAlign","date","published_date","elevation","sx","height","padding","marginBottom","content","onSubmit","fullWidth","endAdornment","type","value","onChange","bgcolor","comments","map","key","alignItems","alt","src","primary","cur_user_comment","secondary","display","cur_user_nickname","DefaultValue","useState","setValue","target","url","onErrorRetry","config","revalidate","retryCount","withCredentials","setItem","response","Error"],"sourceRoot":""}