{"version":3,"file":"741.js","mappings":"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","sources":["webpack://loatus_web/./hooks/useInput.ts","webpack://loatus_web/./hooks/useTokenAxios.ts","webpack://loatus_web/./hooks/useSocket.ts","webpack://loatus_web/./pages/PartyPage/styles.ts","webpack://loatus_web/./components/CharacterAvatar/index.tsx","webpack://loatus_web/./components/Chat/index.tsx","webpack://loatus_web/./components/ChatList/index.tsx","webpack://loatus_web/./components/ChatBox/index.tsx","webpack://loatus_web/./pages/PartyPage/index.tsx"],"sourcesContent":["import {useState, useCallback, ChangeEvent, Dispatch} from \"react\";\r\nimport React from \"react\";\r\n\r\ntype ReturnTypes<T = any> = [T, (e:any)=>void, Dispatch<React.SetStateAction<T>>];\r\nconst useInput = <T = any>(DefaultValue: T):ReturnTypes => {\r\n    const [value, setValue] = useState<T>(DefaultValue);\r\n    const onChangeValue = useCallback((e:any)=>{\r\n        setValue(e.target.value);\r\n    }, [setValue])\r\n    return [value, onChangeValue, setValue]\r\n}\r\n\r\nexport default useInput;","import axios from 'axios';\r\nimport { StateMutator } from 'swr-global-state';\r\n\r\nconst useTokenAxios = (refreshToken: string) => {\r\n  const tokenAxios = axios.create({\r\n    headers: {\r\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\r\n    },\r\n  });\r\n  tokenAxios.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n      axios\r\n        .post(\r\n          process.env.REACT_APP_DB_HOST + '/auth/reissue',\r\n          {},\r\n          {\r\n            withCredentials: false,\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\r\n              refreshToken: refreshToken,\r\n            },\r\n          },\r\n        )\r\n        .then((res) => {\r\n          localStorage.setItem('accessToken', res.data.data);\r\n        })\r\n        .catch((error) => error);\r\n    },\r\n  );\r\n  return tokenAxios;\r\n};\r\n\r\nexport default useTokenAxios;\r\n","import { io, Socket } from 'socket.io-client';\r\nimport { useCallback } from 'react';\r\n\r\nconst backUrl = process.env.REACT_APP_DB_HOST + '/api/';\r\n\r\nconst sockets: { [key: string]: Socket } = {};\r\nconst useSocket = (Channel?: string): [Socket | undefined, () => void] => {\r\n  console.log('rerender', Channel);\r\n  const disconnect = useCallback(() => {\r\n    if (Channel) {\r\n      sockets[Channel].disconnect();\r\n      delete sockets[Channel];\r\n    }\r\n  }, [Channel]);\r\n  if (!Channel) {\r\n    return [undefined, disconnect];\r\n  }\r\n  if (!sockets[Channel]) {\r\n    sockets[Channel] = io(`${backUrl}/ws-${Channel}`, {\r\n      transports: ['websocket'],\r\n    });\r\n  }\r\n\r\n  return [sockets[Channel], disconnect];\r\n};\r\n\r\nexport default useSocket;\r\n","import styled from '@emotion/styled';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport const ModalBox = styled(Box)`\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: aliceblue;\r\n  border: 2px solid #000;\r\n  boxshadow: 24;\r\n  p: 4;\r\n  padding: 5px;\r\n`;\r\n","import React, { FC } from 'react';\nimport gravatar from 'gravatar';\nimport { Avatar } from '@mui/material';\nimport { IUser } from '@typings/db';\nimport { useCookies } from 'react-cookie';\nimport useTokenAxios from '@hooks/useTokenAxios';\nimport { toast } from 'react-toastify';\n\ntype Props = {\n  user: IUser;\n};\n\nconst CharacterAvatar: FC<Props> = (Props) => {\n  const [token] = useCookies(['refreshToken']);\n  return (\n    <Avatar\n      src={Props.user.profileImage || gravatar.url(Props.user.email, { d: 'retro' })}\n      onClick={() => {\n        console.log(Props.user.id);\n        useTokenAxios(token.refreshToken)\n          .post(process.env.REACT_APP_DB_HOST + '/friend/request', {\n            // .post('/friend/request', {\n            toUserId: +Props.user.id,\n          })\n          .then((res) => {\n            toast.success(res.data.message);\n          })\n          .catch((err) => {\n            toast.error(err.message);\n          });\n      }}\n    />\n  );\n};\n\nexport default CharacterAvatar;\n","import React, { FC, memo } from 'react';\nimport { IChat } from '@typings/partyDB';\nimport Box from '@mui/material/Box';\nimport { Avatar, Grid, ListItem, ListItemAvatar, ListItemText, Typography } from '@mui/material';\nimport gravatar from 'gravatar';\nimport ReactTimeAgo from 'react-time-ago';\nimport CharacterAvatar from '@components/CharacterAvatar';\n\ntype Props = {\n  data: IChat;\n};\n\nconst Chat: FC<Props> = ({ data }) => {\n  return (\n    <ListItem>\n      <ListItemAvatar>\n        <CharacterAvatar user={data.User} />\n      </ListItemAvatar>\n      <ListItemText\n        primary={data.content}\n        secondary={\n          <React.Fragment>\n            <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\n              {data.User.characterName || data.User.nickname}\n            </Typography>\n            - <ReactTimeAgo date={data.createdAt} />\n          </React.Fragment>\n        }\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(Chat);\n","import React, { FC } from 'react';\r\nimport useSWRRetry from '@hooks/useSWRRetry';\r\nimport { useCookies } from 'react-cookie';\r\nimport { IChat } from '@typings/partyDB';\r\nimport Chat from '@components/Chat';\r\nimport List from '@mui/material/List';\r\nimport Scrollbars from 'react-custom-scrollbars-2';\r\nimport dayjs from 'dayjs';\r\n\r\ntype Props = {\r\n  url: string | undefined;\r\n  name: string;\r\n};\r\n\r\nconst ChatList: FC<Props> = (data) => {\r\n  const [token] = useCookies(['refreshToken']);\r\n  const {\r\n    data: ChatData,\r\n    error: ChatError,\r\n    mutate: ChatMutate,\r\n  } = useSWRRetry<IChat[]>(\r\n    data.url !== undefined\r\n      ? process.env.REACT_APP_DB_HOST + `/api/channels/${data.url}/parties/${data.name}/chats?perPage=20&page=1`\r\n      : null,\r\n    token.refreshToken,\r\n  );\r\n\r\n  return (\r\n    <List sx={{ height: '500px', overflow: 'auto' }}>\r\n      {ChatData?.sort((a, b) => dayjs(a.createdAt).diff(b.createdAt)).map((chat, key) => (\r\n        <Chat data={chat} key={key}></Chat>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n","import React, { FC, useCallback } from 'react';\r\nimport { FilledInput, FormControl, IconButton, InputAdornment, TextField } from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport useInput from '@hooks/useInput';\r\nimport { toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport useSWRRetry from '@hooks/useSWRRetry';\r\nimport { IChat } from '@typings/partyDB';\r\nimport { useCookies } from 'react-cookie';\r\n\r\ntype Props = {\r\n  url: string | undefined;\r\n  name: string;\r\n};\r\n\r\nconst ChatBox: FC<Props> = (data) => {\r\n  const accessToken = localStorage.getItem('accessToken');\r\n  const [token] = useCookies(['refreshToken']);\r\n  const [comment, onChangeComment, setComment] = useInput('');\r\n  const {\r\n    data: ChatData,\r\n    error: ChatError,\r\n    mutate: ChatMutate,\r\n  } = useSWRRetry<IChat[]>(\r\n    data.url !== undefined\r\n      ? process.env.REACT_APP_DB_HOST + `/api/channels/${data.url}/parties/${data.name}/chats?perPage=20&page=1`\r\n      : null,\r\n    token.refreshToken,\r\n  );\r\n\r\n  const onSubmitComment = useCallback(\r\n    (e: any) => {\r\n      e.preventDefault();\r\n      if (!comment) {\r\n        toast.error('메시지 내용이 없습니다');\r\n        return;\r\n      }\r\n      axios\r\n        .post(\r\n          process.env.REACT_APP_DB_HOST + `/api/channels/${data.url}/parties/${data.name}/chats`,\r\n          {\r\n            content: comment,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          },\r\n        )\r\n        .then((res) => {\r\n          ChatMutate();\r\n          setComment('');\r\n        })\r\n        .catch((err) => {\r\n          toast.error(err.message);\r\n        });\r\n    },\r\n    [comment],\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmitComment}>\r\n      <FormControl fullWidth variant=\"filled\">\r\n        <FilledInput\r\n          fullWidth\r\n          endAdornment={\r\n            <InputAdornment position=\"end\">\r\n              <IconButton type={'submit'}>\r\n                <SendIcon />\r\n              </IconButton>\r\n            </InputAdornment>\r\n          }\r\n          value={comment}\r\n          onChange={onChangeComment}\r\n        />\r\n      </FormControl>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","import React, { useCallback, useEffect, useState } from 'react';\nimport List from '@mui/material/List';\nimport {\n  Avatar,\n  Button,\n  IconButton,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Modal,\n  SpeedDial,\n  SpeedDialIcon,\n  Tabs,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport { useCookies } from 'react-cookie';\nimport useSWRRetry from '@hooks/useSWRRetry';\nimport { IUser } from '@typings/db';\nimport { Party } from '@typings/partyDB';\nimport { useParams } from 'react-router';\nimport gravatar from 'gravatar';\nimport ReactTimeAgo from 'react-time-ago';\nimport useSocket from '@hooks/useSocket';\nimport { ModalBox } from '@pages/PartyPage/styles';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport ChatList from '@components/ChatList';\nimport ChatBox from '@components/ChatBox';\nimport { TabPane } from 'react-bootstrap';\nimport Box from '@mui/material/Box';\nimport CharacterAvatar from '@components/CharacterAvatar';\n\nconst PartyPage = () => {\n  const accessToken = localStorage.getItem('accessToken');\n  const [token] = useCookies(['refreshToken']);\n  const {\n    data: userData,\n    error: userError,\n    mutate: userMutate,\n  } = useSWRRetry<IUser>(process.env.REACT_APP_DB_HOST + '/auth/my', token.refreshToken);\n  const params = useParams();\n  const [openPostParty, setOpenPostParty] = useState(false);\n  const [openPartyChat, setOpenPartyChat] = useState(false);\n  const [partyName, onChangePartyName, setPartyName] = useInput('');\n  const [chatName, setChatName] = useState('');\n  const {\n    data: partiesData,\n    error: partiesError,\n    mutate: partiesMutate,\n  } = useSWRRetry<Party[]>(process.env.REACT_APP_DB_HOST + `/api/channels/${params.url}/parties`, token.refreshToken);\n  const {\n    data: myPartiesData,\n    error: myPartiesError,\n    mutate: myPartiesMutate,\n  } = useSWRRetry<Party[]>(\n    userData ? process.env.REACT_APP_DB_HOST + `/api/channels/${params.url}/parties/my/${userData.id}` : null,\n    token.refreshToken,\n  );\n  const [socket, disconnect] = useSocket(params.url);\n\n  const handleClose = useCallback(() => {\n    setOpenPostParty(false);\n    setOpenPartyChat(false);\n    setPartyName('');\n  }, []);\n\n  const onSubmitParty = useCallback(\n    (e: any) => {\n      e.preventDefault();\n      if (!partyName) {\n        toast.error('파티 제목을 입력해 주세요.');\n        return;\n      }\n      axios\n        .post(\n          process.env.REACT_APP_DB_HOST + `/api/channels/${params.url}/parties`,\n          {\n            name: partyName,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${accessToken}`,\n            },\n          },\n        )\n        .then((res) => {\n          myPartiesMutate();\n          partiesMutate();\n          toast.success(res.data.message);\n          handleClose();\n          setPartyName('');\n        })\n        .catch((err) => {\n          toast.error(err.message);\n        });\n    },\n    [partyName],\n  );\n\n  useEffect(() => {\n    if (myPartiesData && userData && socket) {\n      socket.emit('login', { id: userData.id, parties: myPartiesData.map((v) => v.id) });\n    }\n  }, [socket, myPartiesData, userData]);\n\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, [params.url, disconnect]);\n\n  return (\n    <Box height={'600px'} overflow={'auto'}>\n      <List>\n        {partiesData?.map((party, key) => (\n          <ListItem\n            key={key}\n            alignItems=\"flex-start\"\n            secondaryAction={\n              <IconButton\n                edge={'end'}\n                aria-label={'comments'}\n                onClick={() => {\n                  setOpenPartyChat(true);\n                  setPartyName(party.name);\n                }}\n              >\n                <CommentIcon />\n              </IconButton>\n            }\n          >\n            <ListItemAvatar>\n              <CharacterAvatar user={party.Owner} />\n            </ListItemAvatar>\n            <ListItemText\n              primary={<React.Fragment>{party.name}</React.Fragment>}\n              secondary={\n                <React.Fragment>\n                  <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\n                    {party.Owner.characterName || party.Owner.nickname}\n                  </Typography>\n                  <Typography variant={'body2'}></Typography>\n                  <Typography>\n                    <ReactTimeAgo date={party.createdAt} />\n                  </Typography>\n                </React.Fragment>\n              }\n            />\n          </ListItem>\n        ))}\n      </List>\n      <SpeedDial\n        ariaLabel=\"SpeedDial basic example\"\n        sx={{ position: 'absolute', bottom: 50, right: 50 }}\n        icon={<SpeedDialIcon />}\n        onClick={() => {\n          setOpenPostParty(true);\n        }}\n      />\n      <Modal\n        open={openPostParty}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <ModalBox position={'absolute'}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            파티 정보를 입력하세요.\n          </Typography>\n          <form onSubmit={onSubmitParty}>\n            <TextField\n              id=\"standard-basic\"\n              label=\"파티제목\"\n              variant=\"standard\"\n              value={partyName}\n              onChange={onChangePartyName}\n            />\n            <Button type=\"submit\">생성하기</Button>\n          </form>\n        </ModalBox>\n      </Modal>\n      <Modal\n        open={openPartyChat}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <ModalBox position={'absolute'} width={'800px'} height={'600px'}>\n          <ChatList url={params.url} name={partyName} />\n          <ChatBox url={params.url} name={partyName} />\n        </ModalBox>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default PartyPage;\n"],"names":["DefaultValue","useState","value","setValue","useCallback","e","target","refreshToken","tokenAxios","axios","headers","Authorization","localStorage","getItem","interceptors","response","use","error","process","withCredentials","then","res","setItem","data","catch","sockets","ModalBox","styled","Box","Props","token","useCookies","Avatar","src","user","profileImage","gravatar","email","d","onClick","console","log","id","useTokenAxios","post","toUserId","toast","message","err","Chat","ListItem","ListItemAvatar","User","ListItemText","primary","content","secondary","Typography","sx","display","component","variant","color","characterName","nickname","ReactTimeAgo","date","createdAt","memo","useSWRRetry","undefined","url","name","ChatData","mutate","List","height","overflow","sort","a","b","dayjs","diff","map","chat","key","accessToken","useInput","comment","onChangeComment","setComment","ChatMutate","onSubmitComment","preventDefault","onSubmit","FormControl","fullWidth","FilledInput","endAdornment","InputAdornment","position","IconButton","type","Send","onChange","userData","params","useParams","openPostParty","setOpenPostParty","openPartyChat","setOpenPartyChat","partyName","onChangePartyName","setPartyName","partiesData","partiesMutate","myPartiesData","myPartiesMutate","Channel","disconnect","io","transports","useSocket","socket","handleClose","onSubmitParty","useEffect","emit","parties","v","party","alignItems","secondaryAction","edge","Comment","Owner","SpeedDial","ariaLabel","bottom","right","icon","SpeedDialIcon","Modal","open","onClose","TextField","label","Button","width"],"sourceRoot":""}