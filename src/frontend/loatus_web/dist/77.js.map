{"version":3,"file":"77.js","mappings":"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","sources":["webpack://loatus_web/./utils/getClassImg.ts","webpack://loatus_web/./components/CharacterSelect/index.tsx","webpack://loatus_web/./hooks/useSWRRetry.ts","webpack://loatus_web/./hooks/useTokenAxios.ts","webpack://loatus_web/./utils/fetcher.ts"],"sourcesContent":["const url = (className: string) =>\r\n  `https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/emblem_${className}.png`;\r\nconst thumbUrl = (className: string) =>\r\n  `https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/${className}_s.png`;\r\n\r\nconst classTable = [\r\n  { korName: '디스트로이어', engName: 'destroyer' },\r\n  { korName: '워로드', engName: 'warlord' },\r\n  { korName: '버서커', engName: 'berserker' },\r\n  { korName: '홀리나이트', engName: 'holyknight' },\r\n  { korName: '배틀마스터', engName: 'battle_master' },\r\n  { korName: '인파이터', engName: 'infighter' },\r\n  { korName: '기공사', engName: 'force_master' },\r\n  { korName: '창술사', engName: 'lance_master' },\r\n  { korName: '스트라이커', engName: 'striker' },\r\n  { korName: '데빌헌터', engName: 'devilhunter' },\r\n  { korName: '블래스터', engName: 'blaster' },\r\n  { korName: '호크아이', engName: 'hawkeye' },\r\n  { korName: '스카우터', engName: 'scouter' },\r\n  { korName: '건슬링어', engName: 'gunslinger' },\r\n  { korName: '바드', engName: 'bard' },\r\n  { korName: '서머너', engName: 'summoner' },\r\n  { korName: '아르카나', engName: 'arcana' },\r\n  { korName: '소서리스', engName: 'sorceress' },\r\n  { korName: '데모닉', engName: 'demonic' },\r\n  { korName: '블레이드', engName: 'blade' },\r\n  { korName: '리퍼', engName: 'reaper' },\r\n  { korName: '도화가', engName: 'artist' },\r\n  { korName: '기상술사', engName: 'weather_artist' },\r\n];\r\n\r\nexport const getClassImg = (className: string): string | null => {\r\n  for (let lostArkClass of classTable) {\r\n    if (lostArkClass.korName === className) {\r\n      return url(lostArkClass.engName);\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const getClassThumbImg = (className: string): string | null => {\r\n  for (let lostArkClass of classTable) {\r\n    if (lostArkClass.korName === className) {\r\n      return thumbUrl(lostArkClass.engName);\r\n    }\r\n  }\r\n  return null;\r\n};\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { APIItem, lostarkInfo } from '@typings/db';\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardMedia,\r\n  Grid,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemButton,\r\n  ListItemText,\r\n  Typography,\r\n} from '@mui/material';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport useToken from '@hooks/useToken';\r\nimport { useCookies } from 'react-cookie';\r\nimport useSWRRetry from '@hooks/useSWRRetry';\r\nimport { toast } from 'react-toastify';\r\nimport { useNavigate } from 'react-router';\r\nimport useTokenAxios from '@hooks/useTokenAxios';\r\nimport { Navigate } from 'react-router-dom';\r\nimport List from '@mui/material/List';\r\nimport { getClassThumbImg } from '@utils/getClassImg';\r\nimport gravatar from 'gravatar';\r\n\r\nconst CharacterSelect = () => {\r\n  const navigate = useNavigate();\r\n  const accessToken = localStorage.getItem('accessToken');\r\n  const [token] = useCookies(['refreshToken']);\r\n  const { data: userData, error, mutate } = useSWRRetry('/auth/my', token.refreshToken);\r\n  const {\r\n    data: randomCode,\r\n    error: randomCodeError,\r\n    mutate: randomCodeMutate,\r\n  } = useSWRRetry('/auth/randomcode', token.refreshToken);\r\n  const [gameInfo, setGameInfo] = useState<lostarkInfo[] | null>(null);\r\n  const onClickSetCharacter = useCallback((characterName: string) => {\r\n    axios\r\n      .post(\r\n        '/user/update/maincharacter',\r\n        {\r\n          characterName: characterName,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${accessToken}`,\r\n          },\r\n        },\r\n      )\r\n      .then((res) => {\r\n        toast.success(res.data.message);\r\n        mutate();\r\n        navigate('/');\r\n      })\r\n      .catch((err) => {\r\n        toast.error(err.message, {\r\n          position: 'top-right',\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (userData?.stoveNo && randomCode) {\r\n      useTokenAxios(token.refreshToken)\r\n        .post(\r\n          '/auth/stove',\r\n          {\r\n            randomCode,\r\n            stoveUrl: `https://timeline.onstove.com/${userData.stoveNo}`,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          },\r\n        )\r\n        .then((res) => {\r\n          setGameInfo(res.data.data);\r\n        })\r\n        .catch((err) => {\r\n          toast.error(err.message);\r\n        });\r\n    }\r\n  }, [randomCode]);\r\n\r\n  if (!userData) {\r\n    return <Navigate to={'/'} />;\r\n  }\r\n\r\n  if (!gameInfo) {\r\n  }\r\n\r\n  return (\r\n    <Grid container width={'1000px'}>\r\n      <Typography component={'h3'} variant={'h3'}>\r\n        대표로 설정하고 싶은 캐릭터를 클릭해주세요.\r\n      </Typography>\r\n      <List sx={{ justifyContent: 'center', width: '100%' }}>\r\n        {gameInfo?.map((info, key) => (\r\n          <ListItem sx={{ width: '30%' }}>\r\n            <ListItemButton\r\n              sx={{\r\n                bgcolor: '#555',\r\n                borderRadius: '10px',\r\n                ':hover': { bgcolor: '#777' },\r\n                color: '#fff',\r\n                width: '350px',\r\n              }}\r\n              onClick={() => onClickSetCharacter(info.CharacterName)}\r\n            >\r\n              <ListItemAvatar>\r\n                <Avatar\r\n                  src={getClassThumbImg(info.CharacterClassName) || gravatar.url('nothing@noting.com')}\r\n                  alt={info.CharacterClassName}\r\n                />\r\n              </ListItemAvatar>\r\n              <ListItemText\r\n                primary={info.CharacterName}\r\n                secondary={\r\n                  <Typography component={'span'} variant={'body2'}>\r\n                    {`${info.ServerName} @ Lv.${info.CharacterLevel}`}\r\n                  </Typography>\r\n                }\r\n              ></ListItemText>\r\n            </ListItemButton>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CharacterSelect;\r\n","import useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport { StateMutator } from 'swr-global-state';\n\nconst useSWRRetry = <T = any>(url: string | null, refreshToken: string) =>\n  useSWR<T | null>(\n    url && localStorage.getItem('accessToken') ? [url, localStorage.getItem('accessToken')] : null,\n    fetcher,\n    {\n      onErrorRetry: (err, key, config, revalidate, { retryCount }) => {\n        if (retryCount < 3) {\n          axios\n            .post(\n              '/auth/reissue',\n              {},\n              {\n                withCredentials: true,\n                headers: {\n                  Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n                  refreshToken: refreshToken,\n                },\n              },\n            )\n            .then((res) => {\n              localStorage.setItem('accessToken', res.data.data);\n            })\n            .catch((error) => error);\n        }\n      },\n    },\n  );\n\nexport default useSWRRetry;\n","import axios from 'axios';\r\nimport { StateMutator } from 'swr-global-state';\r\n\r\nconst useTokenAxios = (refreshToken: string) => {\r\n  const tokenAxios = axios.create();\r\n  tokenAxios.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n      axios\r\n        .post(\r\n          '/auth/reissue',\r\n          {},\r\n          {\r\n            withCredentials: true,\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\r\n              refreshToken: refreshToken,\r\n            },\r\n          },\r\n        )\r\n        .then((res) => {\r\n          localStorage.setItem('accessToken', res.data.data);\r\n        })\r\n        .catch((error) => error);\r\n    },\r\n  );\r\n  return tokenAxios;\r\n};\r\n\r\nexport default useTokenAxios;\r\n","import axios from 'axios';\r\n\r\nconst fetcher = async ([url, token]: string[]) => {\r\n  const res = await axios\r\n    .get(url, {\r\n      withCredentials: true,\r\n      headers: token\r\n        ? {\r\n            Authorization: `Bearer ${token}`,\r\n          }\r\n        : {},\r\n    })\r\n    .then((response) => response.data.data)\r\n    .catch((error) => null);\r\n  if (res === null) {\r\n    const error = new Error('errro');\r\n    throw error;\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nexport default fetcher;\r\n"],"names":["thumbUrl","className","classTable","korName","engName","getClassThumbImg","lostArkClass","navigate","useNavigate","accessToken","localStorage","getItem","token","useCookies","useSWRRetry","refreshToken","userData","data","mutate","error","randomCode","useState","gameInfo","setGameInfo","onClickSetCharacter","useCallback","characterName","axios","headers","Authorization","then","res","toast","message","catch","err","position","useEffect","stoveNo","useTokenAxios","post","stoveUrl","Grid","container","width","Typography","component","variant","List","sx","justifyContent","map","info","key","ListItem","ListItemButton","bgcolor","borderRadius","color","onClick","CharacterName","ListItemAvatar","Avatar","src","CharacterClassName","gravatar","alt","ListItemText","primary","secondary","ServerName","CharacterLevel","to","url","useSWR","fetcher","onErrorRetry","config","revalidate","retryCount","withCredentials","setItem","tokenAxios","interceptors","response","use","Error"],"sourceRoot":""}