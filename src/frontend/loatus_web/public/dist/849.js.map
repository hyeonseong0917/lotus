{"version":3,"file":"849.js","mappings":"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","sources":["webpack://loatus_web/./hooks/useInput.ts","webpack://loatus_web/./hooks/useSWRRetry.ts","webpack://loatus_web/./hooks/useSocket.ts","webpack://loatus_web/./pages/PartyPage/styles.ts","webpack://loatus_web/./components/Chat/index.tsx","webpack://loatus_web/./components/ChatList/index.tsx","webpack://loatus_web/./components/ChatBox/index.tsx","webpack://loatus_web/./pages/PartyPage/index.tsx","webpack://loatus_web/./utils/fetcher.ts"],"sourcesContent":["import {useState, useCallback, ChangeEvent, Dispatch} from \"react\";\r\nimport React from \"react\";\r\n\r\ntype ReturnTypes<T = any> = [T, (e:any)=>void, Dispatch<React.SetStateAction<T>>];\r\nconst useInput = <T = any>(DefaultValue: T):ReturnTypes => {\r\n    const [value, setValue] = useState<T>(DefaultValue);\r\n    const onChangeValue = useCallback((e:any)=>{\r\n        setValue(e.target.value);\r\n    }, [setValue])\r\n    return [value, onChangeValue, setValue]\r\n}\r\n\r\nexport default useInput;","import useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport { StateMutator } from 'swr-global-state';\n\nconst useSWRRetry = <T = any>(url: string | null, refreshToken: string) =>\n  useSWR<T | null>(\n    url && localStorage.getItem('accessToken') ? [url, localStorage.getItem('accessToken')] : null,\n    fetcher,\n    {\n      onErrorRetry: (err, key, config, revalidate, { retryCount }) => {\n        if (retryCount < 3) {\n          axios\n            .post(\n              process.env.REACT_APP_DB_HOST + '/auth/reissue',\n              {},\n              {\n                withCredentials: false,\n                headers: {\n                  Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n                  refreshToken: refreshToken,\n                },\n              },\n            )\n            .then((res) => {\n              localStorage.setItem('accessToken', res.data.data);\n            })\n            .catch((error) => error);\n        }\n      },\n    },\n  );\n\nexport default useSWRRetry;\n","import { io, Socket } from 'socket.io-client';\r\nimport { useCallback } from 'react';\r\n\r\nconst backUrl = process.env.REACT_APP_DB_HOST + '/api/';\r\n\r\nconst sockets: { [key: string]: Socket } = {};\r\nconst useSocket = (Channel?: string): [Socket | undefined, () => void] => {\r\n  console.log('rerender', Channel);\r\n  const disconnect = useCallback(() => {\r\n    if (Channel) {\r\n      sockets[Channel].disconnect();\r\n      delete sockets[Channel];\r\n    }\r\n  }, [Channel]);\r\n  if (!Channel) {\r\n    return [undefined, disconnect];\r\n  }\r\n  if (!sockets[Channel]) {\r\n    sockets[Channel] = io(`${backUrl}/ws-${Channel}`, {\r\n      transports: ['websocket'],\r\n    });\r\n  }\r\n\r\n  return [sockets[Channel], disconnect];\r\n};\r\n\r\nexport default useSocket;\r\n","import styled from '@emotion/styled';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport const ModalBox = styled(Box)`\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: aliceblue;\r\n  border: 2px solid #000;\r\n  boxshadow: 24;\r\n  p: 4;\r\n  padding: 5px;\r\n`;\r\n","import React, { FC, memo } from 'react';\r\nimport { IChat } from '@typings/partyDB';\r\nimport Box from '@mui/material/Box';\r\nimport { Avatar, Grid, ListItem, ListItemAvatar, ListItemText, Typography } from '@mui/material';\r\nimport gravatar from 'gravatar';\r\nimport ReactTimeAgo from 'react-time-ago';\r\n\r\ntype Props = {\r\n  data: IChat;\r\n};\r\n\r\nconst Chat: FC<Props> = ({ data }) => {\r\n  return (\r\n    <ListItem>\r\n      <ListItemAvatar>\r\n        <Avatar src={data.User.profileImage || gravatar.url(data.User.email, { d: 'retro' })} />\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={data.content}\r\n        secondary={\r\n          <React.Fragment>\r\n            <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\r\n              {data.User.characterName || data.User.nickname}\r\n            </Typography>\r\n            - <ReactTimeAgo date={data.createdAt} />\r\n          </React.Fragment>\r\n        }\r\n      />\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default memo(Chat);\r\n","import React, { FC } from 'react';\r\nimport useSWRRetry from '@hooks/useSWRRetry';\r\nimport { useCookies } from 'react-cookie';\r\nimport { IChat } from '@typings/partyDB';\r\nimport Chat from '@components/Chat';\r\nimport List from '@mui/material/List';\r\nimport Scrollbars from 'react-custom-scrollbars-2';\r\nimport dayjs from 'dayjs';\r\n\r\ntype Props = {\r\n  url: string | undefined;\r\n  name: string;\r\n};\r\n\r\nconst ChatList: FC<Props> = (data) => {\r\n  const [token] = useCookies(['refreshToken']);\r\n  const {\r\n    data: ChatData,\r\n    error: ChatError,\r\n    mutate: ChatMutate,\r\n  } = useSWRRetry<IChat[]>(\r\n    data.url !== undefined\r\n      ? process.env.REACT_APP_DB_HOST + `/api/channels/${data.url}/parties/${data.name}/chats?perPage=20&page=1`\r\n      : null,\r\n    token.refreshToken,\r\n  );\r\n\r\n  return (\r\n    <List sx={{ height: '500px', overflow: 'auto' }}>\r\n      {ChatData?.sort((a, b) => dayjs(a.createdAt).diff(b.createdAt)).map((chat, key) => (\r\n        <Chat data={chat} key={key}></Chat>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n","import React, { FC, useCallback } from 'react';\r\nimport { FilledInput, FormControl, IconButton, InputAdornment, TextField } from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport useInput from '@hooks/useInput';\r\nimport { toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport useSWRRetry from '@hooks/useSWRRetry';\r\nimport { IChat } from '@typings/partyDB';\r\nimport { useCookies } from 'react-cookie';\r\n\r\ntype Props = {\r\n  url: string | undefined;\r\n  name: string;\r\n};\r\n\r\nconst ChatBox: FC<Props> = (data) => {\r\n  const accessToken = localStorage.getItem('accessToken');\r\n  const [token] = useCookies(['refreshToken']);\r\n  const [comment, onChangeComment, setComment] = useInput('');\r\n  const {\r\n    data: ChatData,\r\n    error: ChatError,\r\n    mutate: ChatMutate,\r\n  } = useSWRRetry<IChat[]>(\r\n    data.url !== undefined\r\n      ? process.env.REACT_APP_DB_HOST + `/api/channels/${data.url}/parties/${data.name}/chats?perPage=20&page=1`\r\n      : null,\r\n    token.refreshToken,\r\n  );\r\n\r\n  const onSubmitComment = useCallback(\r\n    (e: any) => {\r\n      e.preventDefault();\r\n      if (!comment) {\r\n        toast.error('메시지 내용이 없습니다');\r\n        return;\r\n      }\r\n      axios\r\n        .post(\r\n          process.env.REACT_APP_DB_HOST + `/api/channels/${data.url}/parties/${data.name}/chats`,\r\n          {\r\n            content: comment,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          },\r\n        )\r\n        .then((res) => {\r\n          ChatMutate();\r\n          setComment('');\r\n        })\r\n        .catch((err) => {\r\n          toast.error(err.message);\r\n        });\r\n    },\r\n    [comment],\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmitComment}>\r\n      <FormControl fullWidth variant=\"filled\">\r\n        <FilledInput\r\n          fullWidth\r\n          endAdornment={\r\n            <InputAdornment position=\"end\">\r\n              <IconButton type={'submit'}>\r\n                <SendIcon />\r\n              </IconButton>\r\n            </InputAdornment>\r\n          }\r\n          value={comment}\r\n          onChange={onChangeComment}\r\n        />\r\n      </FormControl>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport List from '@mui/material/List';\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  IconButton,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Modal,\r\n  SpeedDial,\r\n  SpeedDialIcon,\r\n  Tabs,\r\n  TextField,\r\n  Typography,\r\n} from '@mui/material';\r\nimport CommentIcon from '@mui/icons-material/Comment';\r\nimport { useCookies } from 'react-cookie';\r\nimport useSWRRetry from '@hooks/useSWRRetry';\r\nimport { IUser } from '@typings/db';\r\nimport { Party } from '@typings/partyDB';\r\nimport { useParams } from 'react-router';\r\nimport gravatar from 'gravatar';\r\nimport ReactTimeAgo from 'react-time-ago';\r\nimport useSocket from '@hooks/useSocket';\r\nimport { ModalBox } from '@pages/PartyPage/styles';\r\nimport useInput from '@hooks/useInput';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport ChatList from '@components/ChatList';\r\nimport ChatBox from '@components/ChatBox';\r\nimport { TabPane } from 'react-bootstrap';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst PartyPage = () => {\r\n  const accessToken = localStorage.getItem('accessToken');\r\n  const [token] = useCookies(['refreshToken']);\r\n  const { data: userData, error: userError, mutate: userMutate } = useSWRRetry<IUser>('/auth/my', token.refreshToken);\r\n  const params = useParams();\r\n  const [openPostParty, setOpenPostParty] = useState(false);\r\n  const [openPartyChat, setOpenPartyChat] = useState(false);\r\n  const [partyName, onChangePartyName, setPartyName] = useInput('');\r\n  const [chatName, setChatName] = useState('');\r\n  const {\r\n    data: partiesData,\r\n    error: partiesError,\r\n    mutate: partiesMutate,\r\n  } = useSWRRetry<Party[]>(process.env.REACT_APP_DB_HOST + `/api/channels/${params.url}/parties`, token.refreshToken);\r\n  const {\r\n    data: myPartiesData,\r\n    error: myPartiesError,\r\n    mutate: myPartiesMutate,\r\n  } = useSWRRetry<Party[]>(\r\n    userData ? process.env.REACT_APP_DB_HOST + `/api/channels/${params.url}/parties/my/${userData.userId}` : null,\r\n    token.refreshToken,\r\n  );\r\n  const [socket, disconnect] = useSocket(params.url);\r\n\r\n  const handleClose = useCallback(() => {\r\n    setOpenPostParty(false);\r\n    setOpenPartyChat(false);\r\n    setPartyName('');\r\n  }, []);\r\n\r\n  const onSubmitParty = useCallback(\r\n    (e: any) => {\r\n      e.preventDefault();\r\n      if (!partyName) {\r\n        toast.error('파티 제목을 입력해 주세요.');\r\n        return;\r\n      }\r\n      axios\r\n        .post(\r\n          process.env.REACT_APP_DB_HOST + `/api/channels/${params.url}/parties`,\r\n          {\r\n            name: partyName,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          },\r\n        )\r\n        .then((res) => {\r\n          myPartiesMutate();\r\n          partiesMutate();\r\n          toast.success(res.data.message);\r\n          handleClose();\r\n          setPartyName('');\r\n        })\r\n        .catch((err) => {\r\n          toast.error(err.message);\r\n        });\r\n    },\r\n    [partyName],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (myPartiesData && userData && socket) {\r\n      socket.emit('login', { id: userData.userId, parties: myPartiesData.map((v) => v.id) });\r\n    }\r\n  }, [socket, myPartiesData, userData]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [params.url, disconnect]);\r\n\r\n  return (\r\n    <Box height={'600px'} overflow={'auto'}>\r\n      <List>\r\n        {partiesData?.map((party, key) => (\r\n          <ListItem\r\n            key={key}\r\n            alignItems=\"flex-start\"\r\n            secondaryAction={\r\n              <IconButton\r\n                edge={'end'}\r\n                aria-label={'comments'}\r\n                onClick={() => {\r\n                  setOpenPartyChat(true);\r\n                  setPartyName(party.name);\r\n                }}\r\n              >\r\n                <CommentIcon />\r\n              </IconButton>\r\n            }\r\n          >\r\n            <ListItemAvatar>\r\n              <Avatar alt={party.Owner.nickname} src={party.Owner.profileImage || gravatar.url(party.Owner.email)} />\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n              primary={<React.Fragment>{party.name}</React.Fragment>}\r\n              secondary={\r\n                <React.Fragment>\r\n                  <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\r\n                    {party.Owner.characterName || party.Owner.nickname}\r\n                  </Typography>\r\n                  <Typography variant={'body2'}></Typography>\r\n                  <Typography>\r\n                    <ReactTimeAgo date={party.createdAt} />\r\n                  </Typography>\r\n                </React.Fragment>\r\n              }\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <SpeedDial\r\n        ariaLabel=\"SpeedDial basic example\"\r\n        sx={{ position: 'absolute', bottom: 50, right: 50 }}\r\n        icon={<SpeedDialIcon />}\r\n        onClick={() => {\r\n          setOpenPostParty(true);\r\n        }}\r\n      />\r\n      <Modal\r\n        open={openPostParty}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <ModalBox position={'absolute'}>\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            파티 정보를 입력하세요.\r\n          </Typography>\r\n          <form onSubmit={onSubmitParty}>\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"파티제목\"\r\n              variant=\"standard\"\r\n              value={partyName}\r\n              onChange={onChangePartyName}\r\n            />\r\n            <Button type=\"submit\">생성하기</Button>\r\n          </form>\r\n        </ModalBox>\r\n      </Modal>\r\n      <Modal\r\n        open={openPartyChat}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <ModalBox position={'absolute'} width={'800px'} height={'600px'}>\r\n          <ChatList url={params.url} name={partyName} />\r\n          <ChatBox url={params.url} name={partyName} />\r\n        </ModalBox>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PartyPage;\r\n","import axios from 'axios';\n\nconst fetcher = async ([url, token]: string[]) => {\n  const res = await axios\n    .get(url, {\n      withCredentials: false,\n      headers: token\n        ? {\n            Authorization: `Bearer ${token}`,\n          }\n        : {},\n    })\n    .then((response) => response.data.data)\n    .catch((error) => null);\n  if (res === null) {\n    const error = new Error('errro');\n    throw error;\n  }\n\n  return res;\n};\n\nexport default fetcher;\n"],"names":["DefaultValue","useState","value","setValue","useCallback","e","target","url","refreshToken","useSWR","localStorage","getItem","fetcher","onErrorRetry","err","key","config","revalidate","retryCount","axios","process","withCredentials","headers","Authorization","then","res","setItem","data","catch","error","sockets","ModalBox","styled","Box","Chat","ListItem","ListItemAvatar","Avatar","src","User","profileImage","gravatar","email","d","ListItemText","primary","content","secondary","Typography","sx","display","component","variant","color","characterName","nickname","ReactTimeAgo","date","createdAt","memo","token","useCookies","useSWRRetry","undefined","name","ChatData","mutate","List","height","overflow","sort","a","b","dayjs","diff","map","chat","accessToken","useInput","comment","onChangeComment","setComment","ChatMutate","onSubmitComment","preventDefault","toast","message","onSubmit","FormControl","fullWidth","FilledInput","endAdornment","InputAdornment","position","IconButton","type","Send","onChange","userData","params","useParams","openPostParty","setOpenPostParty","openPartyChat","setOpenPartyChat","partyName","onChangePartyName","setPartyName","partiesData","partiesMutate","userId","myPartiesData","myPartiesMutate","Channel","console","log","disconnect","io","transports","useSocket","socket","handleClose","onSubmitParty","useEffect","emit","id","parties","v","party","alignItems","secondaryAction","edge","onClick","Comment","alt","Owner","SpeedDial","ariaLabel","bottom","right","icon","SpeedDialIcon","Modal","open","onClose","TextField","label","Button","width","response","Error"],"sourceRoot":""}