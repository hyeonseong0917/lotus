{"version":3,"file":"541.js","mappings":";gPAYA,QARiB,SAAUA,GACvB,QAAmD,MAAzBC,EAAAA,EAAAA,UAAYD,KAAa,o5BAA5CE,EAAK,KAAEC,EAAQ,KAItB,MAAO,CAACD,GAHcE,EAAAA,EAAAA,cAAY,SAACC,GAC/BF,EAASE,EAAEC,OAAOJ,MACtB,GAAG,CAACC,IAC0BA,EAClC,+ZCTA,gnGAAAI,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,+kBAAAA,GAAA,gEAAAA,GAAA,0JAAAA,EAAA,6FAAAA,GAAA,mIAAAA,IAAA,+RAAAA,IAAA,2OAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,SA0FA,QA9EiB,WACf,IAAMC,GAAWC,EAAAA,EAAAA,MACVC,EAAqC,GAA5BC,EAAAA,EAAAA,GAAW,CAAC,iBAAgB,GAAhC,GACZ,GAIIC,EAAAA,EAAAA,GAAmBC,6FAA4CH,EAAMI,cAHjEC,EAAQ,EAAdC,KAIIC,GAHY,EAAhBC,MACkB,EAAlBC,QAEaC,EAAAA,EAAAA,OACf,GAIIR,EAAAA,EAAAA,GAAuBC,kGAAiDH,EAAMI,cAH1EO,EAAQ,EAAdL,KAIkD,GAH9B,EAApBE,MACsB,EAAtBC,OAEkD,GAAXG,EAAAA,EAAAA,GAAS,GAAE,IAA7CpB,EAAK,KAAEqB,EAAa,KAAEpB,EAAQ,KACwB,KAAXmB,EAAAA,EAAAA,GAAS,GAAE,GAAtDE,EAAQ,KAAoBC,GAAF,KAAa,MAC9C,GAIIb,EAAAA,EAAAA,GACFG,EAAWF,qFAAgC,iBAAH,OAAoBI,EAAOS,IAAG,uBAAeX,EAASY,IAAO,KACrGjB,EAAMI,cALAc,EAAa,EAAnBZ,KAQF,OAPuB,EAArBE,MACuB,EAAvBC,OAOA,gCACE,gBAAC,IAAI,CAACjB,MAAOA,EAAO2B,SAAUN,EAAe,aAAW,sBACrDF,aAAQ,EAARA,EAAUS,KAAI,SAACC,EAASC,GAAG,OAC1B,gBAAC,IAAG,CACFC,MAAOF,EAAQG,KACfP,GAAE,cAASK,GACXA,IAAKA,EACL,mCAA2BA,GAC3BG,QAAS,WACPhC,EAAS6B,GACTxB,EAAS,aAAD,OAAcuB,EAAQL,IAAG,YACnC,GACA,KAGN,gBAAC,KAAM,MACP,gBAAC,IAAgB,CACfU,YAAU,EACVlC,MAAOsB,EACPK,SAAU,SAACQ,EAAOC,GAChBb,EAAYa,EACd,GAECV,aAAa,EAAbA,EAAeE,KAAI,SAACS,EAAOP,GAAG,OAC7B,gBAAC,IAAsB,CACrBA,IAAKA,EACLC,MAAOM,EAAML,KACbM,KACE,gBAAC,IAAK,CACJC,aACE,4CACG,oGAC2BC,EAAAA,EAAAA,IACnB7B,qFAAgC,iBAAH,OAAoBI,EAAOS,IAAG,oBAAYa,EAAML,KAAI,YACrFS,MAAK,SAACC,GAAG,OAAKA,EAAI5B,IAAI,IACtB6B,OAAM,SAACC,GAAG,OAAK,CAAC,IAAC,OAHH,OAAXF,EAAc,EAAH,uBAIVA,GAAG,4CAIhBG,MAAM,WAEN,gBAAC,IAAW,QAGhB,KAKZ","sources":["webpack://loatus_web/./hooks/useInput.ts","webpack://loatus_web/./pages/Channels/index.tsx"],"sourcesContent":["import {useState, useCallback, ChangeEvent, Dispatch} from \"react\";\r\nimport React from \"react\";\r\n\r\ntype ReturnTypes<T = any> = [T, (e:any)=>void, Dispatch<React.SetStateAction<T>>];\r\nconst useInput = <T = any>(DefaultValue: T):ReturnTypes => {\r\n    const [value, setValue] = useState<T>(DefaultValue);\r\n    const onChangeValue = useCallback((e:any)=>{\r\n        setValue(e.target.value);\r\n    }, [setValue])\r\n    return [value, onChangeValue, setValue]\r\n}\r\n\r\nexport default useInput;","import React, { useCallback, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport useSWRRetry from '@hooks/useSWRRetry';\nimport { Channel, Party } from '@typings/partyDB';\nimport { Outlet, useNavigate, useParams } from 'react-router';\nimport { Badge, Tab, Tabs } from '@mui/material';\nimport useInput from '@hooks/useInput';\nimport BottomNavigation from '@mui/material/BottomNavigation';\nimport BottomNavigationAction from '@mui/material/BottomNavigationAction';\nimport { IUser } from '@typings/db';\nimport MessageIcon from '@mui/icons-material/Message';\nimport axios from 'axios';\n\nconst Channels = () => {\n  const navigate = useNavigate();\n  const [token] = useCookies(['refreshToken']);\n  const {\n    data: userData,\n    error: userError,\n    mutate: userMutate,\n  } = useSWRRetry<IUser>(process.env.REACT_APP_DB_HOST + '/auth/my', token.refreshToken);\n  const params = useParams();\n  const {\n    data: channels,\n    error: channelsError,\n    mutate: channelsMutate,\n  } = useSWRRetry<Channel[]>(process.env.REACT_APP_DB_HOST + '/api/channels', token.refreshToken);\n  const [value, onChangeValue, setValue] = useInput(0);\n  const [navValue, onChangeNavValue, setNavValue] = useInput(0);\n  const {\n    data: myPartiesData,\n    error: myPartiesError,\n    mutate: myPartiesMutate,\n  } = useSWRRetry<Party[]>(\n    userData ? process.env.REACT_APP_DB_HOST + `/api/channels/${params.url}/parties/my/${userData.id}` : null,\n    token.refreshToken,\n  );\n\n  return (\n    <>\n      <Tabs value={value} onChange={onChangeValue} aria-label=\"basic tabs example\">\n        {channels?.map((channel, key) => (\n          <Tab\n            label={channel.name}\n            id={`tab-${key}`}\n            key={key}\n            aria-controls={`tabpanel-${key}`}\n            onClick={() => {\n              setValue(key);\n              navigate(`/channels/${channel.url}/parties`);\n            }}\n          />\n        ))}\n      </Tabs>\n      <Outlet />\n      <BottomNavigation\n        showLabels\n        value={navValue}\n        onChange={(event, newValue) => {\n          setNavValue(newValue);\n        }}\n      >\n        {myPartiesData?.map((party, key) => (\n          <BottomNavigationAction\n            key={key}\n            label={party.name}\n            icon={\n              <Badge\n                badgeContent={\n                  <>\n                    {async () => {\n                      const res: number = await axios\n                        .get(process.env.REACT_APP_DB_HOST + `/api/channels/${params.url}/parties/${party.name}/unread`)\n                        .then((res) => res.data)\n                        .catch((err) => 0);\n                      return res;\n                    }}\n                  </>\n                }\n                color=\"primary\"\n              >\n                <MessageIcon />\n              </Badge>\n            }\n          />\n        ))}\n      </BottomNavigation>\n    </>\n  );\n};\n\nexport default Channels;\n"],"names":["DefaultValue","useState","value","setValue","useCallback","e","target","i","navigate","useNavigate","token","useCookies","useSWRRetry","process","refreshToken","userData","data","params","error","mutate","useParams","channels","useInput","onChangeValue","navValue","setNavValue","url","id","myPartiesData","onChange","map","channel","key","label","name","onClick","showLabels","event","newValue","party","icon","badgeContent","axios","then","res","catch","err","color"],"sourceRoot":""}