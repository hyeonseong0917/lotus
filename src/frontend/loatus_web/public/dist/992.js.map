{"version":3,"file":"992.js","mappings":"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","sources":["webpack://loatus_web/./hooks/useInput.ts","webpack://loatus_web/./hooks/useTokenAxios.ts","webpack://loatus_web/./pages/Login/styles.tsx","webpack://loatus_web/./pages/My/index.tsx"],"sourcesContent":["import {useState, useCallback, ChangeEvent, Dispatch} from \"react\";\r\nimport React from \"react\";\r\n\r\ntype ReturnTypes<T = any> = [T, (e:any)=>void, Dispatch<React.SetStateAction<T>>];\r\nconst useInput = <T = any>(DefaultValue: T):ReturnTypes => {\r\n    const [value, setValue] = useState<T>(DefaultValue);\r\n    const onChangeValue = useCallback((e:any)=>{\r\n        setValue(e.target.value);\r\n    }, [setValue])\r\n    return [value, onChangeValue, setValue]\r\n}\r\n\r\nexport default useInput;","import axios from 'axios';\r\nimport { StateMutator } from 'swr-global-state';\r\n\r\nconst useTokenAxios = (refreshToken: string) => {\r\n  const tokenAxios = axios.create({\r\n    headers: {\r\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\r\n    },\r\n  });\r\n  tokenAxios.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n      axios\r\n        .post(\r\n          process.env.REACT_APP_DB_HOST + '/auth/reissue',\r\n          {},\r\n          {\r\n            withCredentials: false,\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\r\n              refreshToken: refreshToken,\r\n            },\r\n          },\r\n        )\r\n        .then((res) => {\r\n          localStorage.setItem('accessToken', res.data.data);\r\n        })\r\n        .catch((error) => error);\r\n    },\r\n  );\r\n  return tokenAxios;\r\n};\r\n\r\nexport default useTokenAxios;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Header = styled.header`\r\n  align-items: center;\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  padding: 48px 0 40px;\r\n  width: 100%;\r\n`;\r\n\r\nexport const Root = styled.div`\r\n  align-items: center;\r\n  background-color: rgba(var(--sk_primary_background, 255, 255, 255), 1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100%;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  -webkit-tap-highlight-color: transparent;\r\n  align-items: center;\r\n  -webkit-appearance: none;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  outline: none;\r\n  position: relative;\r\n  text-align: center;\r\n  -webkit-user-select: none;\r\n  user-select: none;\r\n  white-space: nowrap;\r\n  box-shadow: none;\r\n  transition: all 80ms linear;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  min-width: 96px;\r\n  background-color: #fff;\r\n  border: 2.5px solid #000000;\r\n  color: #000000;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const Hr = styled.hr`\r\n  border: none;\r\n  border-top: 1px solid #ddd;\r\n  clear: both;\r\n  flex-grow: 1;\r\n  margin: 0;\r\n`;\r\n\r\nexport const Horizon = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  margin-top: 24px;\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nexport const Page = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  flex-shrink: 0;\r\n  max-width: 800px;\r\n  width: 100%;\r\n  box-sizing: inherit;\r\n`;\r\n\r\nexport const PageHead = styled.h1`\r\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\r\n  font-size: 60px;\r\n  font-weight: 700;\r\n  letter-spacing: -0.75px;\r\n  line-height: 46px;\r\n  margin-bottom: 10px;\r\n  max-width: 700px;\r\n  text-align: center;\r\n  margin-block-start: 0.67em;\r\n  margin-block-end: 0.67em;\r\n  margin-inline-start: 0px;\r\n  margin-inline-end: 0px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 11px 12px 13px;\r\n  height: 44px;\r\n  font-size: 18px;\r\n  line-height: 1.33333333;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  border: 1px solid rgba(29, 28, 29, 0.3);\r\n  transition: border 80ms ease-out, box-shadow 80ms ease-out;\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px;\r\n`;\r\n\r\nexport const SignIn = styled.div`\r\n  font-size: 15px;\r\n  line-height: 1.46668;\r\n  font-weight: initial;\r\n  color: #1d1c1d;\r\n  font-variant-ligatures: common-ligatures;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  -webkit-font-smoothing: antialiased;\r\n  display: block;\r\n  width: 400px;\r\n  & a {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n","import React, { useCallback, useEffect, useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport useInput from '@hooks/useInput';\nimport { Link, Navigate, useSearchParams } from 'react-router-dom';\nimport { Button, Header, Horizon, Hr, Input, Page, PageHead, Root, SignIn } from '@pages/Login/styles';\nimport { APIItem, Friend, IToken, IUser } from '@typings/db';\nimport useSWR from 'swr';\nimport { useCookies } from 'react-cookie';\nimport { Row, Col, Form } from 'react-bootstrap';\nimport { Container, CircularProgress } from '@mui/material';\nimport { toast, ToastContainer } from 'react-toastify';\nimport useToken from '@hooks/useToken';\nimport useSWRRetry from '@hooks/useSWRRetry';\nimport useTokenAxios from '@hooks/useTokenAxios';\nimport { lostarkInfo } from '@typings/db';\nimport Avatar from '@mui/material/Avatar';\nimport gravatar from 'gravatar';\n\nconst My = () => {\n  const [token, setToken] = useCookies(['refreshToken']);\n  const accessToken = localStorage.getItem('accessToken');\n  const { data: userData, error, mutate } = useSWRRetry(process.env.REACT_APP_DB_HOST + '/auth/my', token.refreshToken);\n  const {\n    data: characterInfo,\n    error: mainCharError,\n    mutate: mainCharMutate,\n  } = useSWRRetry<lostarkInfo>(process.env.REACT_APP_DB_HOST + '/user/load/maincharacter', token.refreshToken, true);\n  const {\n    data: friendList,\n    error: friendError,\n    mutate: friendMutate,\n  } = useSWRRetry<Friend[]>(process.env.REACT_APP_DB_HOST + '/friend/list', token.refreshToken, true);\n  const {\n    data: friendRequestList,\n    error: friendRequestError,\n    mutate: friendRequestMutate,\n  } = useSWRRetry<Friend[]>(process.env.REACT_APP_DB_HOST + '/friend/request/list', token.refreshToken, true);\n  const [nickname, onChangeNickname, setNickname] = useInput('');\n  const [friendId, setFriendId] = useState<number>(0);\n\n  const onSubmitUpdateNickname = useCallback(\n    async (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      await useTokenAxios(token.refreshToken)\n        .post(process.env.REACT_APP_DB_HOST + '/user/update/nickname', {\n          nickname,\n        })\n        .then((response) => {\n          if (response.data.code === 200) {\n            toast.success('닉네임 변경이 성공했습니다.', {\n              position: 'top-right',\n            });\n            mainCharMutate();\n            mutate();\n          } else {\n            toast.error('닉네임 변경이 실패했습니다.', {\n              position: 'top-right',\n            });\n          }\n        })\n        .catch((error) => {\n          toast.error('닉네임 변경이 실패했습니다.', {\n            position: 'top-right',\n          });\n        });\n    },\n    [nickname],\n  );\n\n  const onSubmitDeleteUser = useCallback(async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    await useTokenAxios(token.refreshToken)\n      .post(process.env.REACT_APP_DB_HOST + '/user/delete', {})\n      .then((response) => {\n        if (response.data.code === 200) {\n          toast.success('회원탈퇴가 성공했습니다.', {\n            position: 'top-right',\n          });\n        } else {\n          toast.error('회원탈퇴가 실패했습니다.', {\n            position: 'top-right',\n          });\n        }\n      })\n      .catch((error) => {\n        toast.error('회원탈퇴가 실패했습니다.', {\n          position: 'top-right',\n        });\n      });\n  }, []);\n\n  const onSubmitDeleteFriend = useCallback(\n    async (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      await useTokenAxios(token.refreshToken)\n        .post(process.env.REACT_APP_DB_HOST + '/friend/delete', {\n          toUserId: friendId,\n        })\n        .then((response) => {\n          if (response.data.code === 200) {\n            toast.success('친구삭제가 성공했습니다.', {\n              position: 'top-right',\n            });\n            friendMutate();\n            friendRequestMutate();\n          } else {\n            toast.error('친구삭제가 실패했습니다.', {\n              position: 'top-right',\n            });\n          }\n        })\n        .catch((error) => {\n          toast.error('친구삭제가 실패했습니다.', {\n            position: 'top-right',\n          });\n        });\n    },\n    [friendId],\n  );\n\n  const onSubmitAcceptFriend = useCallback(\n    async (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      await useTokenAxios(token.refreshToken)\n        .post(\n          process.env.REACT_APP_DB_HOST + '/friend/accept',\n          {\n            toUserId: friendId,\n          },\n          {\n            withCredentials: false,\n            headers: {\n              Authorization: 'Bearer ' + accessToken,\n            },\n          },\n        )\n        .then((response) => {\n          if (response.data.code === 200) {\n            toast.success('친구수락이 성공했습니다.', {\n              position: 'top-right',\n            });\n            friendMutate();\n            friendRequestMutate();\n          } else {\n            toast.error('친구수락이 실패했습니다.', {\n              position: 'top-right',\n            });\n          }\n        })\n        .catch((error) => {\n          toast.error('친구수락이 실패했습니다.', {\n            position: 'top-right',\n          });\n        });\n    },\n    [friendId],\n  );\n\n  const onSubmitRefuseFriend = useCallback(\n    async (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      await useTokenAxios(token.refreshToken)\n        .post(\n          process.env.REACT_APP_DB_HOST + '/friend/refuse',\n          {\n            toUserId: friendId,\n          },\n          {\n            withCredentials: false,\n            headers: {\n              Authorization: 'Bearer ' + accessToken,\n            },\n          },\n        )\n        .then((response) => {\n          if (response.data.code === 200) {\n            toast.success('친구거절이 성공했습니다.', {\n              position: 'top-right',\n            });\n            friendMutate();\n            friendRequestMutate();\n          } else {\n            toast.error('친구거절이 실패했습니다.', {\n              position: 'top-right',\n            });\n          }\n        })\n        .catch((error) => {\n          toast.error('친구거절이 실패했습니다.', {\n            position: 'top-right',\n          });\n        });\n    },\n    [friendId],\n  );\n\n  if (!userData) {\n    return <Navigate to={'/login'} />;\n  }\n\n  return (\n    <Root>\n      <Container maxWidth={false}>\n        <Row>\n          <table>\n            <tr>\n              <td>프로필 사진</td>\n              <td>\n                <Avatar\n                  alt={userData?.characterName || userData?.nickname}\n                  src={userData?.profileImage || gravatar.url(userData.email, { s: '25', d: 'retro' })}\n                />\n              </td>\n            </tr>\n\n            <tr>\n              <td>캐릭터명</td>\n              <td>{characterInfo?.CharacterName}</td>\n            </tr>\n\n            <tr>\n              <td>아이템 레벨</td>\n              <td>{characterInfo?.ItemAvgLevel}</td>\n            </tr>\n\n            <tr>\n              <td>클래스</td>\n              <td>{characterInfo?.CharacterClassName}</td>\n            </tr>\n\n            <tr>\n              <td>서버명</td>\n              <td>{characterInfo?.ServerName}</td>\n            </tr>\n\n            <tr>\n              <td>닉네임</td>\n              <td>{userData?.nickname}</td>\n            </tr>\n\n            {/* <tr>\n              <td>친구 수</td>\n              <td>{friendList && friendList[0].friendCount}</td>\n            </tr> */}\n          </table>\n\n          <Form onSubmit={onSubmitUpdateNickname}>\n            <Input placeholder={'닉네임'} type=\"input\" value={nickname} onChange={onChangeNickname} />\n            <Button type=\"submit\">변경</Button>\n          </Form>\n\n          <Form onSubmit={onSubmitDeleteUser}>\n            <Button type=\"submit\">회원탈퇴</Button>\n          </Form>\n        </Row>\n      </Container>\n\n      <Container maxWidth={false}>\n        <table>\n          <tr>\n            <th>친구 목록</th>\n            <th></th>\n            <th></th>\n          </tr>\n          {friendList ? (\n            friendList.map((friend, key) => {\n              return (\n                <tr>\n                  <td>{friend.nickname}</td>\n                  <td>{friend.characterName}</td>\n                  <td>\n                    <Form onSubmit={onSubmitDeleteFriend}>\n                      <Button type=\"submit\" onClick={() => setFriendId(friend.userId)}>\n                        삭제\n                      </Button>\n                    </Form>\n                  </td>\n                  <td>\n                    <Form>\n                      <Button type=\"submit\">채팅</Button>\n                    </Form>\n                  </td>\n                </tr>\n              );\n            })\n          ) : (\n            <tr>\n              <td colSpan={1}>\n                <CircularProgress />\n              </td>\n            </tr>\n          )}\n        </table>\n\n        <table>\n          <tr>\n            <th>친구요청 목록</th>\n            <th></th>\n            <th></th>\n            <th></th>\n          </tr>\n          {friendRequestList ? (\n            friendRequestList.map((friend, key) => {\n              return (\n                <tr>\n                  <td>\n                    {friend.nickname}({friend.characterName})\n                  </td>\n                  <td>\n                    <Form onSubmit={onSubmitAcceptFriend}>\n                      <Button type=\"submit\" onClick={() => setFriendId(friend.userId)}>\n                        수락\n                      </Button>\n                    </Form>\n                  </td>\n                  <td>\n                    <Form onSubmit={onSubmitRefuseFriend}>\n                      <Button type=\"submit\" onClick={() => setFriendId(friend.userId)}>\n                        거절\n                      </Button>\n                    </Form>\n                  </td>\n                  <td></td>\n                </tr>\n              );\n            })\n          ) : (\n            <tr>\n              <td colSpan={1}>\n                <CircularProgress />\n              </td>\n            </tr>\n          )}\n        </table>\n      </Container>\n    </Root>\n  );\n};\n\nexport default My;\n"],"names":["DefaultValue","useState","value","setValue","useCallback","e","target","refreshToken","tokenAxios","axios","headers","Authorization","localStorage","getItem","interceptors","response","use","error","process","withCredentials","then","res","setItem","data","catch","Header","styled","Root","Button","Hr","Horizon","Page","PageHead","Input","SignIn","i","useCookies","token","accessToken","useSWRRetry","userData","mutate","characterInfo","mainCharMutate","friendList","friendMutate","friendRequestList","friendRequestMutate","useInput","nickname","onChangeNickname","friendId","setFriendId","onSubmitUpdateNickname","preventDefault","useTokenAxios","post","code","toast","position","onSubmitDeleteUser","onSubmitDeleteFriend","toUserId","onSubmitAcceptFriend","onSubmitRefuseFriend","maxWidth","alt","characterName","src","profileImage","gravatar","email","s","d","CharacterName","ItemAvgLevel","CharacterClassName","ServerName","onSubmit","placeholder","type","onChange","map","friend","key","onClick","userId","colSpan","to"],"sourceRoot":""}