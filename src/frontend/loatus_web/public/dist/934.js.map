{"version":3,"file":"934.js","mappings":"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","sources":["webpack://loatus_web/./components/Post/index.tsx","webpack://loatus_web/./hooks/useInput.ts"],"sourcesContent":["import React, { useCallback } from 'react';\r\nimport { IPost } from '@typings/db';\r\nimport useSWR from 'swr';\r\nimport fetcher from '@utils/fetcher';\r\nimport { useNavigate, useParams } from 'react-router';\r\nimport {\r\n  Avatar,\r\n  Badge,\r\n  Button,\r\n  Divider,\r\n  FilledInput,\r\n  FormControl,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n} from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport List from '@mui/material/List';\r\nimport { ThumbUp } from '@mui/icons-material';\r\nimport useInput from '@hooks/useInput';\r\nimport axios from 'axios';\r\nimport { useCookies } from 'react-cookie';\r\nimport useSWRRetry from '@hooks/useSWRRetry';\r\nimport { toast } from 'react-toastify';\r\nimport ReactTimeAgo from 'react-time-ago';\r\n\r\nconst Post = () => {\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const accessToken = localStorage.getItem('accessToken');\r\n  const {\r\n    data: PostData,\r\n    error: postError,\r\n    mutate: postMutate,\r\n  } = useSWR<IPost[]>([process.env.REACT_APP_DB_HOST + `/post/${params.id}`, accessToken], fetcher);\r\n  const [token] = useCookies(['refreshToken']);\r\n  const { data: userData, error, mutate } = useSWRRetry(process.env.REACT_APP_DB_HOST + '/auth/my', token.refreshToken);\r\n  const [comment, onChangeComment, setComment] = useInput('');\r\n\r\n  const onSubmitComment = useCallback(\r\n    (e: any) => {\r\n      e.preventDefault();\r\n      if (!comment) {\r\n        toast.error('빈 댓글을 등록할 수 없습니다.', {\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      }\r\n      if (!userData) {\r\n        toast.error('로그인 후에 이용할 수 있습니다.', {\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      }\r\n      axios\r\n        .post(\r\n          process.env.REACT_APP_DB_HOST + '/post/comment/',\r\n          {\r\n            post: params.id,\r\n            text: comment,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          },\r\n        )\r\n        .then((res) => {\r\n          postMutate();\r\n          setComment('');\r\n        })\r\n        .catch((err) => {\r\n          toast.error(err.message, {\r\n            position: 'top-right',\r\n          });\r\n        });\r\n    },\r\n    [comment, params, userData, accessToken],\r\n  );\r\n\r\n  const onClickLike = useCallback(() => {\r\n    if (!userData) {\r\n      toast.error('로그인 후에 이용할 수 있습니다.', {\r\n        position: 'top-right',\r\n      });\r\n      return;\r\n    }\r\n\r\n    axios\r\n      .get(process.env.REACT_APP_DB_HOST + `/post/like/${params.id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        postMutate();\r\n      })\r\n      .catch((err) => {\r\n        toast.error(err.message, {\r\n          position: 'top-right',\r\n        });\r\n      });\r\n  }, [userData, accessToken, params]);\r\n\r\n  if (PostData)\r\n    return (\r\n      <>\r\n        <Box width={1000}>\r\n          <Typography variant={'h2'} component={'h2'} fontFamily={'Noto Sans KR, sans-serif'}>\r\n            {PostData && PostData[0].fields.title}\r\n            <Badge badgeContent={PostData && PostData[0].fields.like.length} color={'success'}>\r\n              <IconButton onClick={onClickLike}>\r\n                <ThumbUp></ThumbUp>\r\n              </IconButton>\r\n            </Badge>\r\n          </Typography>\r\n          <Button onClick={() => navigate(-1)}>뒤로가기</Button>\r\n        </Box>\r\n        <Grid container marginTop={'30px'}>\r\n          <Grid xs={4} item>\r\n            {PostData[0].fields.author}\r\n          </Grid>\r\n          <Grid xs={8} item textAlign={'right'}>\r\n            <ReactTimeAgo date={PostData[0].fields.published_date} />\r\n          </Grid>\r\n        </Grid>\r\n        <Paper elevation={3} sx={{ height: '350px', marginTop: '20px', padding: '30px', marginBottom: '20px' }}>\r\n          <Box>{PostData && PostData[0].fields.content}</Box>\r\n        </Paper>\r\n        <div>\r\n          <form onSubmit={onSubmitComment}>\r\n            <FormControl fullWidth variant=\"filled\">\r\n              <FilledInput\r\n                fullWidth\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton type={'submit'}>\r\n                      <SendIcon />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                }\r\n                value={comment}\r\n                onChange={onChangeComment}\r\n              />\r\n            </FormControl>\r\n          </form>\r\n        </div>\r\n        <Divider />\r\n        <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\r\n          {typeof PostData[0].fields.comments !== 'string' &&\r\n            PostData[0].fields.comments.map((comment, key) => (\r\n              <ListItem alignItems=\"flex-start\" key={key}>\r\n                <ListItemAvatar>\r\n                  <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={comment.cur_user_comment}\r\n                  secondary={\r\n                    <React.Fragment>\r\n                      <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\r\n                        {comment.cur_user_nickname}\r\n                      </Typography>\r\n                    </React.Fragment>\r\n                  }\r\n                />\r\n              </ListItem>\r\n            ))}\r\n        </List>\r\n      </>\r\n    );\r\n  else return null;\r\n};\r\n\r\nexport default Post;\r\n","import {useState, useCallback, ChangeEvent, Dispatch} from \"react\";\r\nimport React from \"react\";\r\n\r\ntype ReturnTypes<T = any> = [T, (e:any)=>void, Dispatch<React.SetStateAction<T>>];\r\nconst useInput = <T = any>(DefaultValue: T):ReturnTypes => {\r\n    const [value, setValue] = useState<T>(DefaultValue);\r\n    const onChangeValue = useCallback((e:any)=>{\r\n        setValue(e.target.value);\r\n    }, [setValue])\r\n    return [value, onChangeValue, setValue]\r\n}\r\n\r\nexport default useInput;"],"names":["navigate","useNavigate","params","useParams","accessToken","localStorage","getItem","useSWR","process","id","fetcher","PostData","data","postMutate","error","mutate","token","useCookies","useSWRRetry","refreshToken","userData","useInput","comment","onChangeComment","setComment","onSubmitComment","useCallback","e","preventDefault","axios","post","text","headers","Authorization","then","res","catch","err","toast","message","position","onClickLike","width","variant","component","fontFamily","fields","title","badgeContent","like","length","color","onClick","container","marginTop","xs","item","author","textAlign","date","published_date","elevation","sx","height","padding","marginBottom","content","onSubmit","fullWidth","endAdornment","type","value","onChange","bgcolor","comments","map","key","alignItems","alt","src","primary","cur_user_comment","secondary","display","cur_user_nickname","DefaultValue","useState","setValue","target"],"sourceRoot":""}