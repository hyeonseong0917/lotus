{"version":3,"file":"77.js","mappings":"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","sources":["webpack://loatus_web/./utils/getClassImg.ts","webpack://loatus_web/./components/CharacterSelect/index.tsx","webpack://loatus_web/./hooks/useSWRRetry.ts","webpack://loatus_web/./hooks/useTokenAxios.ts","webpack://loatus_web/./utils/fetcher.ts"],"sourcesContent":["const url = (className: string) =>\n  `https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/emblem_${className}.png`;\nconst thumbUrl = (className: string) =>\n  `https://cdn-lostark.game.onstove.com/2018/obt/assets/images/common/thumb/${className}_s.png`;\n\nconst classTable = [\n  { korName: '디스트로이어', engName: 'destroyer' },\n  { korName: '워로드', engName: 'warlord' },\n  { korName: '버서커', engName: 'berserker' },\n  { korName: '홀리나이트', engName: 'holyknight' },\n  { korName: '배틀마스터', engName: 'battle_master' },\n  { korName: '인파이터', engName: 'infighter' },\n  { korName: '기공사', engName: 'force_master' },\n  { korName: '창술사', engName: 'lance_master' },\n  { korName: '스트라이커', engName: 'striker' },\n  { korName: '데빌헌터', engName: 'devilhunter' },\n  { korName: '블래스터', engName: 'blaster' },\n  { korName: '호크아이', engName: 'hawkeye' },\n  { korName: '스카우터', engName: 'scouter' },\n  { korName: '건슬링어', engName: 'gunslinger' },\n  { korName: '바드', engName: 'bard' },\n  { korName: '서머너', engName: 'summoner' },\n  { korName: '아르카나', engName: 'arcana' },\n  { korName: '소서리스', engName: 'sorceress' },\n  { korName: '데모닉', engName: 'demonic' },\n  { korName: '블레이드', engName: 'blade' },\n  { korName: '리퍼', engName: 'reaper' },\n  { korName: '도화가', engName: 'artist' },\n  { korName: '기상술사', engName: 'weather_artist' },\n];\n\nexport const getClassImg = (className: string): string | null => {\n  for (let lostArkClass of classTable) {\n    if (lostArkClass.korName === className) {\n      return url(lostArkClass.engName);\n    }\n  }\n  return null;\n};\n\nexport const getClassThumbImg = (className: string): string | null => {\n  for (let lostArkClass of classTable) {\n    if (lostArkClass.korName === className) {\n      return thumbUrl(lostArkClass.engName);\n    }\n  }\n  return null;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { APIItem, lostarkInfo } from '@typings/db';\nimport {\n  Avatar,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Grid,\n  ListItem,\n  ListItemAvatar,\n  ListItemButton,\n  ListItemText,\n  Typography,\n} from '@mui/material';\nimport axios, { AxiosResponse } from 'axios';\nimport useToken from '@hooks/useToken';\nimport { useCookies } from 'react-cookie';\nimport useSWRRetry from '@hooks/useSWRRetry';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router';\nimport useTokenAxios from '@hooks/useTokenAxios';\nimport { Navigate } from 'react-router-dom';\nimport List from '@mui/material/List';\nimport { getClassThumbImg } from '@utils/getClassImg';\nimport gravatar from 'gravatar';\n\nconst CharacterSelect = () => {\n  const navigate = useNavigate();\n  const accessToken = localStorage.getItem('accessToken');\n  const [token] = useCookies(['refreshToken']);\n  const { data: userData, error, mutate } = useSWRRetry(process.env.REACT_APP_DB_HOST + '/auth/my', token.refreshToken);\n  const {\n    data: randomCode,\n    error: randomCodeError,\n    mutate: randomCodeMutate,\n  } = useSWRRetry(process.env.REACT_APP_DB_HOST + '/auth/randomcode', token.refreshToken);\n  const [gameInfo, setGameInfo] = useState<lostarkInfo[] | null>(null);\n  const onClickSetCharacter = useCallback((characterName: string) => {\n    axios\n      .post(\n        process.env.REACT_APP_DB_HOST + '/user/update/maincharacter',\n        {\n          characterName: characterName,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        },\n      )\n      .then((res) => {\n        toast.success(res.data.message);\n        mutate();\n        navigate('/');\n      })\n      .catch((err) => {\n        toast.error(err.message, {\n          position: 'top-right',\n        });\n      });\n  }, []);\n\n  useEffect(() => {\n    if (userData?.stoveNo && randomCode) {\n      useTokenAxios(token.refreshToken)\n        .post(\n          process.env.REACT_APP_DB_HOST + '/auth/stove',\n          {\n            randomCode,\n            stoveUrl: `https://timeline.onstove.com/${userData.stoveNo}`,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${accessToken}`,\n            },\n          },\n        )\n        .then((res) => {\n          setGameInfo(res.data.data);\n        })\n        .catch((err) => {\n          toast.error(err.message);\n        });\n    }\n  }, [randomCode]);\n\n  if (!userData) {\n    return <Navigate to={'/'} />;\n  }\n\n  if (!gameInfo) {\n  }\n\n  return (\n    <Grid container width={'1000px'}>\n      <Typography component={'h3'} variant={'h3'}>\n        대표로 설정하고 싶은 캐릭터를 클릭해주세요.\n      </Typography>\n      <List sx={{ justifyContent: 'center', width: '100%' }}>\n        {gameInfo?.map((info, key) => (\n          <ListItem sx={{ width: '30%' }}>\n            <ListItemButton\n              sx={{\n                bgcolor: '#555',\n                borderRadius: '10px',\n                ':hover': { bgcolor: '#777' },\n                color: '#fff',\n                width: '350px',\n              }}\n              onClick={() => onClickSetCharacter(info.CharacterName)}\n            >\n              <ListItemAvatar>\n                <Avatar\n                  src={getClassThumbImg(info.CharacterClassName) || gravatar.url('nothing@noting.com')}\n                  alt={info.CharacterClassName}\n                />\n              </ListItemAvatar>\n              <ListItemText\n                primary={info.CharacterName}\n                secondary={\n                  <Typography component={'span'} variant={'body2'}>\n                    {`${info.ServerName} @ Lv.${info.CharacterLevel}`}\n                  </Typography>\n                }\n              ></ListItemText>\n            </ListItemButton>\n          </ListItem>\n        ))}\n      </List>\n    </Grid>\n  );\n};\n\nexport default CharacterSelect;\n","import useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport { StateMutator } from 'swr-global-state';\n\nconst useSWRRetry = <T = any>(url: string | null, refreshToken: string) =>\n  useSWR<T | null>(\n    url && localStorage.getItem('accessToken') ? [url, localStorage.getItem('accessToken')] : null,\n    fetcher,\n    {\n      onErrorRetry: (err, key, config, revalidate, { retryCount }) => {\n        if (retryCount < 3) {\n          axios\n            .post(\n              process.env.REACT_APP_DB_HOST + '/auth/reissue',\n              {},\n              {\n                withCredentials: false,\n                headers: {\n                  Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n                  refreshToken: refreshToken,\n                },\n              },\n            )\n            .then((res) => {\n              localStorage.setItem('accessToken', res.data.data);\n            })\n            .catch((error) => error);\n        }\n      },\n    },\n  );\n\nexport default useSWRRetry;\n","import axios from 'axios';\nimport { StateMutator } from 'swr-global-state';\n\nconst useTokenAxios = (refreshToken: string) => {\n  const tokenAxios = axios.create({\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n    },\n  });\n  tokenAxios.interceptors.response.use(\n    (response) => response,\n    (error) => {\n      axios\n        .post(\n          process.env.REACT_APP_DB_HOST + '/auth/reissue',\n          {},\n          {\n            withCredentials: false,\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n              refreshToken: refreshToken,\n            },\n          },\n        )\n        .then((res) => {\n          localStorage.setItem('accessToken', res.data.data);\n        })\n        .catch((error) => error);\n    },\n  );\n  return tokenAxios;\n};\n\nexport default useTokenAxios;\n","import axios from 'axios';\n\nconst fetcher = async ([url, token]: string[]) => {\n  const res = await axios\n    .get(url, {\n      withCredentials: false,\n      headers: token\n        ? {\n            Authorization: `Bearer ${token}`,\n          }\n        : {},\n    })\n    .then((response) => response.data.data)\n    .catch((error) => null);\n  if (res === null) {\n    const error = new Error('errro');\n    throw error;\n  }\n\n  return res;\n};\n\nexport default fetcher;\n"],"names":["thumbUrl","className","classTable","korName","engName","getClassThumbImg","lostArkClass","navigate","useNavigate","accessToken","localStorage","getItem","token","useCookies","useSWRRetry","process","refreshToken","userData","data","mutate","error","randomCode","useState","gameInfo","setGameInfo","onClickSetCharacter","useCallback","characterName","axios","headers","Authorization","then","res","toast","message","catch","err","position","useEffect","stoveNo","useTokenAxios","post","stoveUrl","Grid","container","width","Typography","component","variant","List","sx","justifyContent","map","info","key","ListItem","ListItemButton","bgcolor","borderRadius","color","onClick","CharacterName","ListItemAvatar","Avatar","src","CharacterClassName","gravatar","alt","ListItemText","primary","secondary","ServerName","CharacterLevel","to","url","useSWR","fetcher","onErrorRetry","config","revalidate","retryCount","withCredentials","setItem","tokenAxios","interceptors","response","use","Error"],"sourceRoot":""}